[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/BreadthFirstTree.js",
    "memberof": null,
    "longname": "src/BreadthFirstTree.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Graph from \"./Graph.js\";\nimport Path  from \"./Path.js\";\n\n/**\n * Represents the result of a BFS algorithm.\n */\nexport default class BreadthFirstTree {\n\n    /**\n     * @param {String|Node} root\n     * The node BFS was started at.\n     *\n     * @param {Function} getParent\n     * Gets a node ID as input and maps to the ID of its BFS predecessor.\n     *\n     * @param {Function} getDistance\n     * Gets a node ID as input and returns its distance from the root node.\n     */\n    constructor(root, getParent, getDistance) {\n\n        /**\n         * The ID if the root node.\n         *\n         * @type {String}\n         */\n        this.rootId = Graph.toNodeId(root);\n\n        /**\n         * Returns the predecessor in a shortest path from the root to the given\n         * node.\n         *\n         * @type {Function}\n         * @private\n         */\n        this.parent = getParent;\n\n        /**\n         * Returns the length in a shortest path from the root to the given\n         * node.\n         *\n         * @type {Function}\n         * @private\n         */\n        this.distance = getDistance;\n    }\n\n    /**\n     * Returns a shortest path from the root node to the given node.\n     *\n     * @param {String|Node} node\n     * The node to find a shortest path to.\n     *\n     * @return {Path}\n     * A shortest path from the root node to the given node.\n     */\n    getShortestPathTo(node) {\n        node = Graph.toNodeId(node);\n\n        const path = [];\n        for (let currentId = node; currentId; currentId = this.parent(currentId)) {\n            path.unshift(currentId);\n        }\n        return new Path(...path);\n    }\n\n    /**\n     * Returns how long the shortest path from the root node to the given node\n     * is.\n     *\n     * @param {String|Node} node\n     * The ending node of the path. Passing in an ID is sufficient.\n     *\n     * @return {Number}\n     * The distance between the root node and the given node.\n     */\n    getDistanceTo(node) {\n        node = Graph.toNodeId(node);\n\n        return this.distance(node);\n    }\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BreadthFirstTree",
    "memberof": "src/BreadthFirstTree.js",
    "longname": "src/BreadthFirstTree.js~BreadthFirstTree",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/BreadthFirstTree.js",
    "importStyle": "BreadthFirstTree",
    "description": "Represents the result of a BFS algorithm.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/BreadthFirstTree.js~BreadthFirstTree",
    "longname": "src/BreadthFirstTree.js~BreadthFirstTree#constructor",
    "access": null,
    "description": "",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "The node BFS was started at."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getParent",
        "description": "Gets a node ID as input and maps to the ID of its BFS predecessor."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getDistance",
        "description": "Gets a node ID as input and returns its distance from the root node."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rootId",
    "memberof": "src/BreadthFirstTree.js~BreadthFirstTree",
    "longname": "src/BreadthFirstTree.js~BreadthFirstTree#rootId",
    "access": null,
    "description": "The ID if the root node.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parent",
    "memberof": "src/BreadthFirstTree.js~BreadthFirstTree",
    "longname": "src/BreadthFirstTree.js~BreadthFirstTree#parent",
    "access": "private",
    "description": "Returns the predecessor in a shortest path from the root to the given\nnode.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "distance",
    "memberof": "src/BreadthFirstTree.js~BreadthFirstTree",
    "longname": "src/BreadthFirstTree.js~BreadthFirstTree#distance",
    "access": "private",
    "description": "Returns the length in a shortest path from the root to the given\nnode.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 6,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getShortestPathTo",
    "memberof": "src/BreadthFirstTree.js~BreadthFirstTree",
    "longname": "src/BreadthFirstTree.js~BreadthFirstTree#getShortestPathTo",
    "access": null,
    "description": "Returns a shortest path from the root node to the given node.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to find a shortest path to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": "A shortest path from the root node to the given node."
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDistanceTo",
    "memberof": "src/BreadthFirstTree.js~BreadthFirstTree",
    "longname": "src/BreadthFirstTree.js~BreadthFirstTree#getDistanceTo",
    "access": null,
    "description": "Returns how long the shortest path from the root node to the given node\nis.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The ending node of the path. Passing in an ID is sufficient."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The distance between the root node and the given node."
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Edge.js",
    "memberof": null,
    "longname": "src/Edge.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {IDGenerator} from \"@ignavia/util\";\n\nimport Graph from \"./Graph.js\";\n\n/**\n * An edge in a graph.\n */\nexport default class Edge {\n\n    /**\n     * Turns a plain JSON object back to an Edge object.\n     *\n     * @param {Object} json\n     * The plain object to convert.\n     *\n     * @return {Edge}\n     * The resulting edge object.\n     */\n    static fromJSON(json) {\n        return new Edge(json.source, json.target, json.id);\n    }\n\n    /**\n     * @param {String|Node} source\n     * The ID of the source node or the source node itself.\n     *\n     * @param {String|Node} target\n     * The ID of the target node or the target node itself.\n     *\n     * @param {String} [id]\n     * The ID of this edge. If provided it must have the form /e[0-9]+/.\n     */\n    constructor(source, target, id) {\n        Edge.idGenerator.avoid(id);\n\n        /**\n         * The ID of the source node.\n         *\n         * @type {String}\n         */\n        this.sourceId = Graph.toNodeId(source);\n\n        /**\n         * The ID of the target node.\n         *\n         * @type {String}\n         */\n        this.targetId = Graph.toNodeId(target);\n\n        /**\n         * The ID of this edge.\n         *\n         * @type {String}\n         */\n        this.id = id || Edge.idGenerator.next();\n\n        /**\n         * The graph that contains this edge. This property will be set after\n         * adding the edge to a graph.\n         *\n         * @type {Graph}\n         */\n        this.graph = undefined;\n    }\n\n    /**\n     * Returns a textual representation of this edge.\n     *\n     * @return {String}\n     * A textual representation of this edge.\n     *\n     * @override\n     */\n    toString() {\n        return `${this.id}(${this.sourceId}, ${this.targetId})`;\n    }\n\n    /**\n     * Returns a JSON representation of this edge.\n     *\n     * @return {Object}\n     * A JSON representation of this edge.\n     */\n    toJSON() {\n        return {\n            source: this.sourceId,\n            target: this.targetId,\n            id:     this.id\n        };\n    }\n}\n\n/**\n * Provides IDs.\n *\n * @type {IDGenerator}\n * @private\n */\nEdge.idGenerator = new IDGenerator(\"e\");\n"
  },
  {
    "__docId__": 9,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Edge",
    "memberof": "src/Edge.js",
    "longname": "src/Edge.js~Edge",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/Edge.js",
    "importStyle": "Edge",
    "description": "An edge in a graph.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromJSON",
    "memberof": "src/Edge.js~Edge",
    "longname": "src/Edge.js~Edge.fromJSON",
    "access": null,
    "description": "Turns a plain JSON object back to an Edge object.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "The plain object to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Edge"
      ],
      "spread": false,
      "description": "The resulting edge object."
    },
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Edge.js~Edge",
    "longname": "src/Edge.js~Edge#constructor",
    "access": null,
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The ID of the source node or the source node itself."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The ID of the target node or the target node itself."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "id",
        "description": "The ID of this edge. If provided it must have the form /e[0-9]+/."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sourceId",
    "memberof": "src/Edge.js~Edge",
    "longname": "src/Edge.js~Edge#sourceId",
    "access": null,
    "description": "The ID of the source node.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "targetId",
    "memberof": "src/Edge.js~Edge",
    "longname": "src/Edge.js~Edge#targetId",
    "access": null,
    "description": "The ID of the target node.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/Edge.js~Edge",
    "longname": "src/Edge.js~Edge#id",
    "access": null,
    "description": "The ID of this edge.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "graph",
    "memberof": "src/Edge.js~Edge",
    "longname": "src/Edge.js~Edge#graph",
    "access": null,
    "description": "The graph that contains this edge. This property will be set after\nadding the edge to a graph.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Edge.js~Edge",
    "longname": "src/Edge.js~Edge#toString",
    "access": null,
    "description": "Returns a textual representation of this edge.",
    "lineNumber": 74,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A textual representation of this edge."
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toJSON",
    "memberof": "src/Edge.js~Edge",
    "longname": "src/Edge.js~Edge#toJSON",
    "access": null,
    "description": "Returns a JSON representation of this edge.",
    "lineNumber": 84,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A JSON representation of this edge."
    },
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Graph.js",
    "memberof": null,
    "longname": "src/Graph.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {EventManager, extensibleExtendedMixin, IDGenerator, observableExtendedMixin} from \"@ignavia/util\";\n\nimport Node             from \"./Node.js\";\nimport Edge             from \"./Edge.js\";\nimport BreadthFirstTree from \"./BreadthFirstTree.js\";\n\n/**\n * A graph data structure.\n *\n * @implements {Observable}\n * @implements {Extensible}\n */\nexport default class Graph {\n\n    /**\n     * Turns a plain JSON object back to a graph object.\n     *\n     * @param {Object} json\n     * The plain object to convert.\n     *\n     * @return {Graph}\n     * The resulting graph object.\n     */\n    static fromJSON(json) {\n        return new Graph({\n            nodes: json.nodes.map(obj => Node.fromJSON(obj)),\n            edges: json.edges.map(obj => Edge.fromJSON(obj)),\n            id:    json.id\n        });\n    }\n\n    /**\n     * A helper function to turn a node or its ID into an ID.\n     *\n     * @param {String|Node} node\n     * The node or its ID.\n     *\n     * @return {String}\n     * The requested ID.\n     */\n    static toNodeId(node) {\n        if (typeof node === \"string\") {\n            return node;\n        } else if (node instanceof Node) {\n            return node.id;\n        }\n    }\n\n    /**\n     * A helper function to turn an edge or its ID into an ID.\n     *\n     * @param {String|Edge} edge\n     * The edge or its ID.\n     *\n     * @return {String}\n     * The requested ID.\n     */\n    static toEdgeId(edge) {\n        if (typeof edge === \"string\") {\n            return edge;\n        } else if (edge instanceof Edge) {\n            return edge.id;\n        }\n    }\n\n    /**\n     * A helper function for other functions that can take a single node ID, an\n     * Iterable for node IDs, a single node or an Iterable for nodes and returns\n     * an iterable object.\n     *\n     * @param {String|Iterator<String>|Node|Iterator<String>} nodes\n     * The parameter to normalize.\n     *\n     * @return {Iterator<String>|Iterator<Node>}\n     * The normalized parameter.\n     */\n    static makeNodesIterable(nodes) {\n        if (typeof nodes === \"string\" || nodes instanceof Node) {\n            return [nodes];\n        }\n        return nodes;\n    }\n\n    /**\n     * A helper function for other functions that can take a single edge ID, an\n     * Iterable for edge IDs, a single edge or an Iterable for edges and returns\n     * an iterable object.\n     *\n     * @param {String|Iterator<String>|Edge|Iterator<String>} edges\n     * The parameter to normalize.\n     *\n     * @return {Iterator<String>|Iterator<Edge>}\n     * The normalized parameter.\n     */\n    static makeEdgesIterable(edges) {\n        if (typeof edges === \"string\" || edges instanceof Edge) {\n            return [edges];\n        }\n        return edges;\n    }\n\n    /**\n     * @param {Object} obj\n     * The options object.\n     *\n     * @param {Iterable} [obj.nodes=[]]\n     * The nodes to add to the graph initially.\n     *\n     * @param {Iterable} [obj.edges=[]]\n     * The edges to add to the graph initially.\n     *\n     * @param {String} [id]\n     * The ID of this graph.\n     */\n    constructor({ nodes = [], edges = [], id } = {}) {\n        Graph.idGenerator.avoid(id);\n\n        /**\n         * The ID of this graph.\n         *\n         * @type {String}\n         */\n        this.id = id || Graph.idGenerator.next();\n\n        /**\n         * Contains all the nodes of the graph.\n         *\n         * @type {Map<String, Node>}\n         * @private\n         */\n        this.nodes = new Map();\n\n        /**\n         * Contains all the edges of the graph.\n         *\n         * @type {Map<String, Edge>}\n         * @private\n         */\n        this.edges = new Map();\n\n        /**\n         * Handles listeners.\n         *\n         * @type {EventManager}\n         */\n        this.eventManager = new EventManager();\n\n        // Add initial nodes and edges\n        this.addNodes(...nodes);\n        this.addEdges(...edges);\n    }\n\n    /**\n     * Adds the given nodes to the graph model.\n     *\n     * @param {...Node} nodeObjs\n     * The nodes to add.\n     *\n     * @return {Graph}\n     * This graph to make the method chainable.\n     *\n     * @emits {Event}\n     * The type property is set to \"addNodes\", the source is this graph and the\n     * data is an array containing the inserted nodes.\n     */\n    addNodes(...nodeObjs) {\n\n        // Add nodes\n        for (let nodeObj of nodeObjs) {\n            nodeObj.graph = this;\n            this.nodes.set(nodeObj.id, nodeObj);\n        }\n\n        // Notify listeners\n        if (nodeObjs.length > 0) {\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"addNodes\",\n                data:   nodeObjs\n            }));\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds the given edges to the graph model. If the graph does not contain\n     * either the source and the target node, they are created and added to the\n     * graph.\n     *\n     * @param {...Edge} edgeObjs\n     * The edges to add.\n     *\n     * @return {Graph}\n     * This graph to make the method chainable.\n     *\n     * @emits {Event}\n     * The type property is set to \"addEdges\", the source is this graph and the\n     * data is an array with the inserted edges.\n     */\n    addEdges(...edgeObjs) {\n\n        // Add edges\n        for (let edgeObj of edgeObjs) {\n            let sourceObj = this.getNodeById(edgeObj.sourceId);\n            let targetObj = this.getNodeById(edgeObj.targetId);\n\n            if (!sourceObj) {\n                sourceObj = new Node(edgeObj.sourceId);\n                this.addNodes(sourceObj);\n            }\n            if (!targetObj) {\n                targetObj = new Node(edgeObj.targetId);\n                this.addNodes(targetObj);\n            }\n\n            // Update edge data\n            edgeObj.graph = this;\n            this.edges.set(edgeObj.id, edgeObj);\n\n            // Update incident nodes\n            sourceObj.addOutgoingEdge(edgeObj);\n            targetObj.addIncomingEdge(edgeObj);\n        }\n\n        // Notify listeners\n        if (edgeObjs.length > 0) {\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:  \"addEdges\",\n                data:  edgeObjs\n            }));\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the given nodes and all incident edges.\n     *\n     * @param {...String|...Node} nodes\n     * The nodes to remove. Passing in IDs is enough.\n     *\n     * @return {Object}\n     * An object of all deleted nodes and edges.\n     *\n     * @emits {Event}\n     * The type property is set to \"removeNodes\", the source is this graph and\n     * the data is another object. This data object has a property nodes which\n     * is an array containing the deleted nodes and another property edges doing\n     * the same for the edges.\n     */\n    removeNodes(...nodes) {\n        const deleted = {\n            nodes: [],\n            edges: []\n        };\n\n        for (let node of nodes) {\n            const nodeObj = this.toNodeObj(node);\n            if (!nodeObj) {\n                continue;\n            }\n\n            // Remove incident edges\n            const deletedEdges = this.removeEdges(...nodeObj.iterIncidentEdges());\n            Array.prototype.push.apply(deleted.edges, deletedEdges);\n\n            // Update node data\n            this.nodes.delete(nodeObj.id);\n            deleted.nodes.push(nodeObj);\n        }\n\n        // Notify listeners\n        if (deleted.nodes.length > 0) {\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"removeNodes\",\n                data:   deleted.nodes\n            }));\n        }\n\n        return deleted;\n    }\n\n    /**\n     * Removes the given edges.\n     *\n     * @param {...String|...Edge} edges\n     * The edges to remove. Passing in IDs is enough.\n     *\n     * @return {Edge[]}\n     * An array of all deleted edges.\n     *\n     * @emits {Event}\n     * The type property is set to \"removeEdges\", the source is this graph and\n     * the data is an array containing all deleted nodes.\n     */\n    removeEdges(...edges) {\n        edges = Graph.makeEdgesIterable(edges);\n\n        const deleted = [];\n\n        // Remove edges\n        for (let edge of edges) {\n            const edgeObj = this.toEdgeObj(edge);\n            if (!edgeObj) {\n                continue;\n            }\n\n            // Update edge data\n            this.edges.delete(edgeObj.id);\n            deleted.push(edgeObj);\n\n            // Update incident nodes\n            this.nodes.get(edgeObj.sourceId).removeOutgoingEdge(edgeObj);\n            this.nodes.get(edgeObj.targetId).removeIncomingEdge(edgeObj);\n        }\n\n        // Notify listeners\n        if (deleted.length > 0) {\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"removeEdges\",\n                data:   deleted\n            }));\n        }\n\n        return deleted;\n    }\n\n    /**\n     * Returns the node with the given ID.\n     *\n     * @param {String} nodeId\n     * The ID of the node.\n     *\n     * @return {Node}\n     * The node with the given ID.\n     */\n    getNodeById(nodeId) {\n        return this.nodes.get(nodeId);\n    }\n\n    /**\n     * Returns the edge with the given ID.\n     *\n     * @param {String} edgeId\n     * The ID of the edge.\n     *\n     * @return {Edge}\n     * The edge with the given ID.\n     */\n    getEdgeById(edgeId) {\n        return this.edges.get(edgeId);\n    }\n\n    /**\n     * Returns the number of nodes in the graph.\n     *\n     * @return {Number}\n     * The number of nodes.\n     */\n    getNumberOfNodes() {\n        return this.nodes.size;\n    }\n\n    /**\n     * Returns the number of edges in the graph.\n     *\n     * @return {Number}\n     * The number of edges.\n     */\n    getNumberOfEdges() {\n        return this.edges.size;\n    }\n\n    /**\n     * An Iterable for the node IDs in this graph.\n     */\n    * iterNodeIds() {\n        yield* this.nodes.keys();\n    }\n\n    /**\n     * An Iterable for the edge IDs in this graph.\n     */\n    * iterEdgeIds() {\n        yield* this.edges.keys();\n    }\n\n    /**\n     * Iterates over the nodes in the graph. If the nodes parameter is specified\n     * only those nodes are considered. Furthermore if a filter function is\n     * supplied only nodes that pass the test are included. It is also possible\n     * to apply a function to a node and yield the result instead.\n     *\n     * @param {Object} [options={}]\n     * Used for various options.\n     *\n     * @param {Function} [options.filter=()=>true]\n     * The filter function to apply. It gets a node as the first parameter\n     * and this graph as the second.\n     *\n     * @param {Function} [options.map=(n)=>n]\n     * The function to use for mapping. It gets a node as the first parameter\n     * and this graph as the second.\n     *\n     * @param {String|Iterator<String>|Node|Iterator<Node>} [options.nodes]\n     * Restricts the nodes to iterate over. Passing in IDs is enough.\n     */\n    * iterNodes({filter = ()=>true, map = (n)=>n, nodes = this.nodes.values()} = {}) {\n        nodes = Graph.makeNodesIterable(nodes);\n\n        for (let node of nodes) {\n            const nodeObj = this.toNodeObj(node);\n            if (nodeObj && filter(nodeObj, this)) {\n                yield map(nodeObj, this);\n            }\n        }\n    }\n\n    /**\n     * Iterates over the edges in the graph. If the edges parameter is specified\n     * only those edges are considered. Furthermore if a filter function is\n     * supplied only edges that pass the test are included. It is also possible\n     * to apply a function to an edge and yield the result instead.\n     *\n     * @param {Object} [options={}]\n     * Used for various options.\n     *\n     * @param {Function} [options.filter=()=>true]\n     * The filter function to apply. It gets an edge as the first parameter\n     * and this graph as the second.\n     *\n     * @param {Function} [options.map=(e)=>e]\n     * The function to use for mapping. It gets a node as the first parameter\n     * and this graph as the second.\n     *\n     * @param {String|Iterator<String>|Edge|Iterator<Edge>} [options.edges]\n     * Restricts the edges to iterate over. Specifying IDs is sufficient.\n     */\n    * iterEdges({filter = ()=>true, map = (e)=>e, edges = this.edges.values()} = {}) {\n        edges = Graph.makeEdgesIterable(edges);\n\n        for (let edge of edges) {\n            const edgeObj = this.toEdgeObj(edge);\n            if (edgeObj && filter(edgeObj, this)) {\n                yield map(edgeObj, this);\n            }\n        }\n    }\n\n    /**\n     * Creates a new graph containing all specified nodes and all edges that\n     * start and end at nodes from this set.\n     *\n     * @param {...String|...Node} nodes\n     * The nodes to include in the result graph. Passing in IDs is enough.\n     *\n     * @return {Graph}\n     * The resulting graph.\n     */\n    generateMaximumSubgraphWith(...nodes) {\n        const result    = new Graph();\n        result.parentId = this.id;\n\n        // Maps from node IDs in this graph to IDs in the new graph.\n        const idMap = new Map();\n\n        // Add nodes\n        for (let node of nodes) {\n            const nodeObj = this.toNodeObj(node);\n            if (nodeObj) {\n                const newNodeObj    = new Node();\n                newNodeObj.parentId = nodeObj.id;\n                result.addNodes(newNodeObj);\n                idMap.set(nodeObj.id, newNodeObj.id);\n            } // TODO needs some mapping from old to new nodes now\n        }\n\n        // Add edges\n        for (let edgeObj of this.iterEdges()) {\n            const newSourceId = idMap.get(edgeObj.sourceId),\n                  newTargetId = idMap.get(edgeObj.targetId);\n            if (newSourceId && newTargetId) {\n                const newEdgeObj = new Edge(\n                    newSourceId,\n                    newTargetId\n                );\n                newEdgeObj.parentId = edgeObj.id;\n                result.addEdges(newEdgeObj);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Creates a graph containing all specified edges and the nodes they start\n     * and end at.\n     *\n     * @param {...String|...Edge} edges\n     * The edges to include in the result graph. Passing in IDs is sufficient.\n     *\n     * @return {Graph}\n     * The resulting graph.\n     */\n    generateMinimumSubgraphWith(...edges) {\n        const result    = new Graph();\n        result.parentId = this.id;\n\n        // Maps from node IDs in this graph to IDs in the new graph.\n        const idMap = new Map();\n\n        for (let edge of edges) {\n            const edgeObj = this.toEdgeObj(edge);\n            if (!edgeObj) {\n                continue;\n            }\n\n            const sourceId = edgeObj.sourceId;\n            const targetId = edgeObj.targetId;\n\n            // Add source node\n            if (!idMap.has(sourceId)) {\n                const source  = this.getNodeById(sourceId);\n                const newNode = new Node();\n                newNode.parentId = source.id;\n                result.addNodes(newNode);\n                idMap.set(sourceId, newNode.id);\n            }\n\n            // Add target node\n            if (!idMap.has(targetId)) {\n                const target     = this.getNodeById(targetId);\n                const newNode    = new Node();\n                newNode.parentId = target.id;\n                result.addNodes(newNode);\n                idMap.set(targetId, newNode.id);\n            }\n\n            // Add edge\n            const newEdge = new Edge(\n                idMap.get(sourceId),\n                idMap.get(targetId)\n            );\n            newEdge.parentId = edgeObj.id;\n            result.addEdges(newEdge);\n        }\n\n        return result;\n    }\n\n    /**\n     * Yields the nodes in the graph in DFS order starting at the root.\n     *\n     * @param {String|Node} root\n     * The starting node.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": The direction of edges is disregarded.\n     * * \"out\": Only edges starting at a node are followed.\n     * * \"inc\": Only edges ending at this node are followed.\n     */\n    * iterDFSVisit(root, direction) {\n        root      = this.toNodeObj(root);\n        direction = direction || \"all\"; // TODO change to default parameter (babel bug)\n\n        const stack   = [root];\n        const visited = new Set();\n\n        while (stack.length > 0) {\n            const currentObj = stack.pop();\n\n            if (!visited.has(currentObj.id)) {\n                yield currentObj;\n                for (let neighborId of currentObj.iterAdjacentNodes(direction)) {\n                    const neighborObj = this.getNodeById(neighborId);\n                    stack.push(neighborObj);\n                }\n                visited.add(currentObj.id);\n            }\n        }\n    }\n\n    /**\n     * Yields the nodes in the graph in BFS order starting at the root.\n     *\n     * @param {String|Node} root\n     * The starting node.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": The direction of edges is disregarded.\n     * * \"out\": Only edges starting at a node are followed.\n     * * \"inc\": Only edges ending at this node are followed.\n     */\n    * iterBFSVisit(root, direction) {\n        root = this.toNodeObj(root);\n        direction = direction || \"all\"; // TODO change to default parameter (babel bug)\n\n        const queue   = [root];\n        const visited = new Set();\n\n        visited.add(root.id);\n\n        while (queue.length > 0) {\n            const currentObj = queue.shift();\n            yield currentObj;\n\n            for (let neighborId of currentObj.iterAdjacentNodes(direction)) {\n                if (!visited.has(neighborId)) {\n                    const neighborObj = this.getNodeById(neighborId);\n                    queue.push(neighborObj);\n                    visited.add(neighborId);\n                }\n            }\n        }\n    }\n\n    /**\n     * Computes a breadth first tree starting at the given node.\n     *\n     * @param {String|Node} root\n     * The node to start the algorithm at.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": The direction of edges is disregarded.\n     * * \"out\": Only edges starting at a node are followed.\n     * * \"inc\": Only edges ending at this node are followed.\n     *\n     * @return {BreadthFirstTree}\n     * The computed breadth first tree.\n     */\n    computeBreadthFirstTree(root, direction = \"all\") {\n        root = this.toNodeObj(root);\n\n        const queue  = [root];\n        const result = new Map();\n\n        result.set(root.id, {\n            parentId: undefined,\n            distance: 0\n        });\n\n        while (queue.length > 0) {\n            const currentObj = queue.shift();\n            for (let neighborId of currentObj.iterAdjacentNodes(direction)) {\n                if (!result.has(neighborId)) {\n                    const neighborObj = this.getNodeById(neighborId);\n                    queue.push(neighborObj);\n                    result.set(neighborId, {\n                        parentId: currentObj.id,\n                        distance: result.get(currentObj.id).distance + 1\n                    });\n                }\n            }\n        }\n\n        return new BreadthFirstTree(\n            root,\n            nodeId => result.has(nodeId) ? result.get(nodeId).parentId : undefined,\n            nodeId => result.has(nodeId) ? result.get(nodeId).distance : undefined\n        );\n    }\n\n    /**\n     * A helper function to turn a node or its ID into a node object.\n     *\n     * @param {String|Node} node\n     * The node to get or its ID.\n     *\n     * @return {Node}\n     * The requested node.\n     */\n    toNodeObj(node) {\n        if (typeof node === \"string\") {\n            return this.getNodeById(node);\n        } else if (node instanceof Node) {\n            return this.getNodeById(node.id);\n        }\n    }\n\n    /**\n     * A helper function to turn an edge or its ID into a edge object.\n     *\n     * @param {String|Edge} edge\n     * The edge to get or its ID.\n     *\n     * @return {Edge}\n     * The requested edge.\n     */\n    toEdgeObj(edge) {\n        if (typeof edge === \"string\") {\n            return this.getEdgeById(edge);\n        } else if (edge instanceof Edge) {\n            return this.getEdgeById(edge.id);\n        }\n    }\n\n    /**\n     * Returns a textual representation of this graph.\n     *\n     * @return {String}\n     * A textual representation of this graph.\n     *\n     * @override\n     */\n    toString() {\n        return this.id;\n    }\n\n    /**\n     * Returns a JSON representation of this graph.\n     *\n     * @return {Object}\n     * A JSON representation of this graph.\n     */\n    toJSON() {\n        return {\n            nodes: [...this.nodes.values()].map(n => n.toJSON()),\n            edges: [...this.edges.values()].map(e => e.toJSON()),\n            id:    this.id\n        };\n    }\n}\n\n/**\n * Provides IDs.\n *\n * @type {IDGenerator}\n * @private\n */\nGraph.idGenerator = new IDGenerator(\"g\");\n\n// Make graphs observable\nObject.assign(Graph.prototype, observableExtendedMixin);\n\n// Make graphs extensible\nObject.assign(Graph.prototype, extensibleExtendedMixin);\n"
  },
  {
    "__docId__": 19,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Graph",
    "memberof": "src/Graph.js",
    "longname": "src/Graph.js~Graph",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/Graph.js",
    "importStyle": "Graph",
    "description": "A graph data structure.",
    "lineNumber": 13,
    "interface": false,
    "implements": [
      "Observable",
      "Extensible"
    ]
  },
  {
    "__docId__": 20,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromJSON",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph.fromJSON",
    "access": null,
    "description": "Turns a plain JSON object back to a graph object.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "The plain object to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "The resulting graph object."
    },
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toNodeId",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph.toNodeId",
    "access": null,
    "description": "A helper function to turn a node or its ID into an ID.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node or its ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The requested ID."
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toEdgeId",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph.toEdgeId",
    "access": null,
    "description": "A helper function to turn an edge or its ID into an ID.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "The edge or its ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The requested ID."
    },
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "makeNodesIterable",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph.makeNodesIterable",
    "access": null,
    "description": "A helper function for other functions that can take a single node ID, an\nIterable for node IDs, a single node or an Iterable for nodes and returns\nan iterable object.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Iterator<String>",
          "Node",
          "Iterator<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "The parameter to normalize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterator<String>",
        "Iterator<Node>"
      ],
      "spread": false,
      "description": "The normalized parameter."
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "makeEdgesIterable",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph.makeEdgesIterable",
    "access": null,
    "description": "A helper function for other functions that can take a single edge ID, an\nIterable for edge IDs, a single edge or an Iterable for edges and returns\nan iterable object.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Iterator<String>",
          "Edge",
          "Iterator<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": "The parameter to normalize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterator<String>",
        "Iterator<Edge>"
      ],
      "spread": false,
      "description": "The normalized parameter."
    },
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#constructor",
    "access": null,
    "description": "",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "obj.nodes",
        "description": "The nodes to add to the graph initially."
      },
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "obj.edges",
        "description": "The edges to add to the graph initially."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "id",
        "description": "The ID of this graph."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#id",
    "access": null,
    "description": "The ID of this graph.",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nodes",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#nodes",
    "access": "private",
    "description": "Contains all the nodes of the graph.",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, Node>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "edges",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#edges",
    "access": "private",
    "description": "Contains all the edges of the graph.",
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, Edge>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 29,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "eventManager",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#eventManager",
    "access": null,
    "description": "Handles listeners.",
    "lineNumber": 146,
    "type": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addNodes",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#addNodes",
    "access": null,
    "description": "Adds the given nodes to the graph model.",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Node"
        ],
        "spread": true,
        "optional": false,
        "name": "nodeObjs",
        "description": "The nodes to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "This graph to make the method chainable."
    },
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "The type property is set to \"addNodes\", the source is this graph and the\ndata is an array containing the inserted nodes."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEdges",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#addEdges",
    "access": null,
    "description": "Adds the given edges to the graph model. If the graph does not contain\neither the source and the target node, they are created and added to the\ngraph.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Edge"
        ],
        "spread": true,
        "optional": false,
        "name": "edgeObjs",
        "description": "The edges to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "This graph to make the method chainable."
    },
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "The type property is set to \"addEdges\", the source is this graph and the\ndata is an array with the inserted edges."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeNodes",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#removeNodes",
    "access": null,
    "description": "Removes the given nodes and all incident edges.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "...String",
          "...Node"
        ],
        "spread": true,
        "optional": false,
        "name": "nodes",
        "description": "The nodes to remove. Passing in IDs is enough."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object of all deleted nodes and edges."
    },
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "The type property is set to \"removeNodes\", the source is this graph and\nthe data is another object. This data object has a property nodes which\nis an array containing the deleted nodes and another property edges doing\nthe same for the edges."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeEdges",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#removeEdges",
    "access": null,
    "description": "Removes the given edges.",
    "lineNumber": 299,
    "params": [
      {
        "nullable": null,
        "types": [
          "...String",
          "...Edge"
        ],
        "spread": true,
        "optional": false,
        "name": "edges",
        "description": "The edges to remove. Passing in IDs is enough."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Edge[]"
      ],
      "spread": false,
      "description": "An array of all deleted edges."
    },
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "The type property is set to \"removeEdges\", the source is this graph and\nthe data is an array containing all deleted nodes."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNodeById",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#getNodeById",
    "access": null,
    "description": "Returns the node with the given ID.",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": "The ID of the node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": "The node with the given ID."
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getEdgeById",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#getEdgeById",
    "access": null,
    "description": "Returns the edge with the given ID.",
    "lineNumber": 354,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeId",
        "description": "The ID of the edge."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Edge"
      ],
      "spread": false,
      "description": "The edge with the given ID."
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNumberOfNodes",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#getNumberOfNodes",
    "access": null,
    "description": "Returns the number of nodes in the graph.",
    "lineNumber": 364,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of nodes."
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNumberOfEdges",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#getNumberOfEdges",
    "access": null,
    "description": "Returns the number of edges in the graph.",
    "lineNumber": 374,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of edges."
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterNodeIds",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#iterNodeIds",
    "access": null,
    "description": "An Iterable for the node IDs in this graph.",
    "lineNumber": 381,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterEdgeIds",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#iterEdgeIds",
    "access": null,
    "description": "An Iterable for the edge IDs in this graph.",
    "lineNumber": 388,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterNodes",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#iterNodes",
    "access": null,
    "description": "Iterates over the nodes in the graph. If the nodes parameter is specified\nonly those nodes are considered. Furthermore if a filter function is\nsupplied only nodes that pass the test are included. It is also possible\nto apply a function to a node and yield the result instead.",
    "lineNumber": 412,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Used for various options."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.filter",
        "description": "The filter function to apply. It gets a node as the first parameter\nand this graph as the second."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.map",
        "description": "The function to use for mapping. It gets a node as the first parameter\nand this graph as the second."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Iterator<String>",
          "Node",
          "Iterator<Node>"
        ],
        "spread": false,
        "optional": true,
        "name": "options.nodes",
        "description": "Restricts the nodes to iterate over. Passing in IDs is enough."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterEdges",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#iterEdges",
    "access": null,
    "description": "Iterates over the edges in the graph. If the edges parameter is specified\nonly those edges are considered. Furthermore if a filter function is\nsupplied only edges that pass the test are included. It is also possible\nto apply a function to an edge and yield the result instead.",
    "lineNumber": 443,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Used for various options."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.filter",
        "description": "The filter function to apply. It gets an edge as the first parameter\nand this graph as the second."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.map",
        "description": "The function to use for mapping. It gets a node as the first parameter\nand this graph as the second."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Iterator<String>",
          "Edge",
          "Iterator<Edge>"
        ],
        "spread": false,
        "optional": true,
        "name": "options.edges",
        "description": "Restricts the edges to iterate over. Specifying IDs is sufficient."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "generateMaximumSubgraphWith",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#generateMaximumSubgraphWith",
    "access": null,
    "description": "Creates a new graph containing all specified nodes and all edges that\nstart and end at nodes from this set.",
    "lineNumber": 464,
    "params": [
      {
        "nullable": null,
        "types": [
          "...String",
          "...Node"
        ],
        "spread": true,
        "optional": false,
        "name": "nodes",
        "description": "The nodes to include in the result graph. Passing in IDs is enough."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "The resulting graph."
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "generateMinimumSubgraphWith",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#generateMinimumSubgraphWith",
    "access": null,
    "description": "Creates a graph containing all specified edges and the nodes they start\nand end at.",
    "lineNumber": 509,
    "params": [
      {
        "nullable": null,
        "types": [
          "...String",
          "...Edge"
        ],
        "spread": true,
        "optional": false,
        "name": "edges",
        "description": "The edges to include in the result graph. Passing in IDs is sufficient."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "The resulting graph."
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterDFSVisit",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#iterDFSVisit",
    "access": null,
    "description": "Yields the nodes in the graph in DFS order starting at the root.",
    "lineNumber": 566,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "The starting node."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": The direction of edges is disregarded.\n* \"out\": Only edges starting at a node are followed.\n* \"inc\": Only edges ending at this node are followed."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterBFSVisit",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#iterBFSVisit",
    "access": null,
    "description": "Yields the nodes in the graph in BFS order starting at the root.",
    "lineNumber": 598,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "The starting node."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": The direction of edges is disregarded.\n* \"out\": Only edges starting at a node are followed.\n* \"inc\": Only edges ending at this node are followed."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 46,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeBreadthFirstTree",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#computeBreadthFirstTree",
    "access": null,
    "description": "Computes a breadth first tree starting at the given node.",
    "lineNumber": 635,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "The node to start the algorithm at."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": The direction of edges is disregarded.\n* \"out\": Only edges starting at a node are followed.\n* \"inc\": Only edges ending at this node are followed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BreadthFirstTree"
      ],
      "spread": false,
      "description": "The computed breadth first tree."
    },
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toNodeObj",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#toNodeObj",
    "access": null,
    "description": "A helper function to turn a node or its ID into a node object.",
    "lineNumber": 676,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to get or its ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": "The requested node."
    },
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toEdgeObj",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#toEdgeObj",
    "access": null,
    "description": "A helper function to turn an edge or its ID into a edge object.",
    "lineNumber": 693,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "The edge to get or its ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Edge"
      ],
      "spread": false,
      "description": "The requested edge."
    },
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#toString",
    "access": null,
    "description": "Returns a textual representation of this graph.",
    "lineNumber": 709,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A textual representation of this graph."
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toJSON",
    "memberof": "src/Graph.js~Graph",
    "longname": "src/Graph.js~Graph#toJSON",
    "access": null,
    "description": "Returns a JSON representation of this graph.",
    "lineNumber": 719,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A JSON representation of this graph."
    },
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Node.js",
    "memberof": null,
    "longname": "src/Node.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {GumpMap, IDGenerator} from \"@ignavia/util\";\n\nimport Graph from \"./Graph.js\";\n\n/**\n * A node in a graph.\n */\nexport default class Node {\n\n    /**\n     * Turns a plain JSON object back to a Node object.\n     *\n     * @param {Object} json\n     * The plain object to convert.\n     *\n     * @return {Node}\n     * The resulting node object.\n     */\n    static fromJSON(json) {\n        return new Node(json.id);\n    }\n\n    /**\n     * @param {String} [id]\n     * The ID of this node.\n     */\n    constructor(id) {\n        Node.idGenerator.avoid(id);\n\n        /**\n         * The ID of this node.\n         *\n         * @type {String}\n         */\n        this.id = id || Node.idGenerator.next();\n\n        /**\n         * The graph that contains this node. This property will be set after\n         * adding the node to a graph.\n         *\n         * @type {Graph}\n         */\n        this.graph = undefined;\n\n        /**\n         * Stores information about adjacent nodes.\n         *\n         * @type {Object}\n         *\n         * @property {GumpMap} adjacencyLists.all\n         * Maps from IDs of all adjacent nodes to the IDs of the edges between\n         * the nodes.\n         *\n         * @property {GumpMap} adjacencyLists.out\n         * Maps from the IDs of all nodes that are the target node of at least\n         * one edge starting at this node to the corresponding edge IDs.\n         *\n         * @property {GumpMap} adjacencyLists.inc\n         * Maps from the IDs of all nodes that are the source node of at least\n         * one edge ending at this node to the corresponding edge IDs.\n         *\n         * @private\n         */\n        this.adjacencyLists = {\n            all: new GumpMap({autoPurgeEmptyContainers: true}),\n            out: new GumpMap({autoPurgeEmptyContainers: true}),\n            inc: new GumpMap({autoPurgeEmptyContainers: true})\n        };\n\n        /**\n         * Stores information about incident edges.\n         *\n         * @type {Object}\n         *\n         * @property {Set<String>} incidenceLists.all\n         * The IDs of all incident edges.\n         *\n         * @property {Set<String>} incidenceLists.out\n         * The IDs of all outgoing edges.\n         *\n         * @property {Set<String>} incidenceLists.inc\n         * The IDs of all incoming edges.\n         *\n         * @private\n         */\n        this.incidenceLists = {\n            all: new Set(),\n            out: new Set(),\n            inc: new Set()\n        };\n    }\n\n    /**\n     * Iterates over the IDs of adjacent nodes. The result depends on the\n     * given direction.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": All adjacent nodes are considered.\n     * * \"out\": Only nodes that are the target node of at least one edge\n     * starting at this node are selected.\n     * * \"inc\": Only nodes that are the source node of at least one edge ending\n     * at this node are chosen.\n     */\n    * iterAdjacentNodes(direction = \"all\") {\n        const adjacencyList = this.adjacencyLists[direction];\n        if (!adjacencyList) {\n            throw new Error(`The direction ${direction} is invalid.`);\n        }\n        yield* adjacencyList.keys();\n    }\n\n    /**\n     * Returns the number of adjacent nodes. The result depends on the given\n     * direction.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": All adjacent nodes are considered.\n     * * \"out\": Only nodes that are the target node of at least one edge\n     * starting at this node are selected.\n     * * \"inc\": Only nodes that are the source node of at least one edge ending\n     * at this node are chosen.\n     *\n     * @return {Number}\n     * The number of adjacent nodes.\n     */\n    getNumberOfAdjacentNodes(direction = \"all\") {\n        const adjacencyList = this.adjacencyLists[direction];\n        if (!adjacencyList) {\n            throw new Error(`The direction ${direction} is invalid.`);\n        }\n        return adjacencyList.children.size;\n    }\n\n    /**\n     * Returns if the given node is adjacent to this one. The result depends on\n     * the supplied direction.\n     *\n     * @param {String|Node} node\n     * The node to test for adjacency. Specifying the ID is sufficient.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": All adjacent nodes are considered.\n     * * \"out\": Only nodes that are the target node of at least one edge\n     * starting at this node are selected.\n     * * \"inc\": Only nodes that are the source node of at least one edge ending\n     * at this node are chosen.\n     *\n     * @return {Boolean}\n     * If the given node is adjacent to this one.\n     */\n    isAdjacentNode(node, direction = \"all\") {\n        node = Graph.toNodeId(node);\n\n        const adjacencyList = this.adjacencyLists[direction];\n        if (!adjacencyList) {\n            throw new Error(`The direction ${direction} is invalid.`);\n        }\n        return adjacencyList.has(node);\n    }\n\n    /**\n     * Iterates over the IDs of the edges between this node and the given node.\n     * The result depends on the direction.\n     *\n     * @param {String|Node} node\n     * The other ending point of the edges. Passing in an ID is enough.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": All edges between the two nodes are considered.\n     * * \"out\": Only edges that start at this node and end at the given one are\n     * selected.\n     * * \"inc\": Only edges that start at the given node and end at this one are\n     * chosen.\n     */\n    * iterEdgesBetween(node, direction = \"all\") {\n        node = Graph.toNodeId(node);\n\n        const adjacencyList = this.adjacencyLists[direction];\n        if (!adjacencyList) {\n            throw new Error(`The direction ${direction} is invalid.`);\n        }\n        if (adjacencyList.has(node)) {\n            yield* adjacencyList.get(node).values();\n        }\n    }\n\n    /**\n     * Returns the number of edges between this node and the given node. The\n     * result depends on the direction.\n     *\n     * @param {String|Node} node\n     * The other ending point of the edges. Specifying an ID is enough.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": All edges between the two nodes are considered.\n     * * \"out\": Only edges that start at this node and end at the given one are\n     * selected.\n     * * \"inc\": Only edges that start at the given node and end at this one are\n     * chosen.\n     *\n     * @return {Number}\n     * The number of edges between this node and the given node.\n     */\n    getNumberOfEdgesBetween(node, direction = \"all\") {\n        node = Graph.toNodeId(node);\n\n        const adjacencyList = this.adjacencyLists[direction];\n        if (!adjacencyList) {\n            throw new Error(`The direction ${direction} is invalid.`);\n        }\n        return adjacencyList.has(node) ? adjacencyList.get(node).size : 0;\n    }\n\n    /**\n     * Returns if the given edge is incident to this node and the given one. The\n     * result depends on the specified direction. Passing in the ID for the node\n     * or the edge is enough.\n     *\n     * @param {String|Node} node\n     * The other ending point of the edge. Giving an ID suffices.\n     *\n     * @param {String|Edge} edge\n     * The edge to test. Specifying an ID is enough.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": All edges between the two nodes are considered.\n     * * \"out\": Only edges that start at this node and end at the given one are\n     * selected.\n     * * \"inc\": Only edges that start at the given node and end at this one are\n     * chosen.\n     *\n     * @return {Boolean}\n     * If the given edge is incident to this node and the given one.\n     */\n    isEdgeBetween(node, edge, direction = \"all\") {\n        node = Graph.toNodeId(node);\n        edge = Graph.toEdgeId(edge);\n\n        const adjacencyList = this.adjacencyLists[direction];\n        if (!adjacencyList) {\n            throw new Error(`The direction ${direction} is invalid.`);\n        }\n        return adjacencyList.has(node, edge);\n    }\n\n    /**\n     * Iterates over the IDs of incident edges. The result depends on the\n     * direction.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": All incident edges are considered.\n     * * \"out\": Only edges that start at this node are selected.\n     * * \"inc\": Only edges that end at this node are chosen.\n     */\n    * iterIncidentEdges(direction = \"all\") {\n        const incidenceList = this.incidenceLists[direction];\n        if (!incidenceList) {\n            throw new Error(`The direction ${direction} is invalid.`);\n        }\n        yield* incidenceList.values();\n    }\n\n    /**\n     * Returns the the degree of this node. This is the number of incident\n     * edges. The result depends on the direction.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": All incident edges are considered.\n     * * \"out\": Only edges that start at this node are selected (outdegree).\n     * * \"inc\": Only edges that end at this node are chosen (indegree).\n     *\n     * @return {Number}\n     * The number of selected edges.\n     */\n    getNumberOfIncidentEdges(direction = \"all\") {\n        const incidenceList = this.incidenceLists[direction];\n        if (!incidenceList) {\n            throw new Error(`The direction ${direction} is invalid.`);\n        }\n        return incidenceList.size;\n    }\n\n    /**\n     * Returns if the given edge is incident to this node. The result depends on\n     * the given direction.\n     *\n     * @param {String|Edge} edge\n     * The edge to test for incidency. Specifying the ID is sufficient.\n     *\n     * @param {String} [direction=\"all\"]\n     * * \"all\": All incident edges are considered.\n     * * \"out\": Only edges that start at this node are selected.\n     * * \"inc\": Only edges that end at this node are chosen.\n     *\n     * @return {Boolean}\n     * If the given edge is incident to this node.\n     */\n    isIncidentEdge(edge, direction = \"all\") {\n        edge = Graph.toEdgeId(edge);\n\n        const incidenceList = this.incidenceLists[direction];\n        if (!incidenceList) {\n            throw new Error(`The direction ${direction} is invalid.`);\n        }\n        return incidenceList.has(edge);\n    }\n\n    /**\n     * Adds a new outgoing edge.\n     *\n     * @param {Edge} edgeObj\n     * The edge to add.\n     *\n     * @ignore\n     */\n    addOutgoingEdge(edgeObj) {\n        const edgeId = edgeObj.id;\n        const targetId = edgeObj.targetId;\n\n        this.adjacencyLists.all.add(targetId, edgeId);\n        this.adjacencyLists.out.add(targetId, edgeId);\n        this.incidenceLists.all.add(edgeId);\n        this.incidenceLists.out.add(edgeId);\n    }\n\n    /**\n     * Adds a new incoming edge.\n     *\n     * @param {Edge} edgeObj\n     * The edge to add.\n     *\n     * @ignore\n     */\n    addIncomingEdge(edgeObj) {\n        const edgeId = edgeObj.id;\n        const sourceId = edgeObj.sourceId;\n\n        this.adjacencyLists.all.add(sourceId, edgeId);\n        this.adjacencyLists.inc.add(sourceId, edgeId);\n        this.incidenceLists.all.add(edgeId);\n        this.incidenceLists.inc.add(edgeId);\n    }\n\n    /**\n     * Removes the given outgoing edge.\n     *\n     * @param {Edge} edgeObj\n     * The edge to remove.\n     *\n     * @ignore\n     */\n    removeOutgoingEdge(edgeObj) {\n        const edgeId = edgeObj.id;\n        const targetId = edgeObj.targetId;\n\n        this.adjacencyLists.all.delete(targetId, edgeId);\n        this.adjacencyLists.out.delete(targetId, edgeId);\n        this.incidenceLists.all.delete(edgeId);\n        this.incidenceLists.out.delete(edgeId);\n    }\n\n    /**\n     * Removes the given incoming edge.\n     *\n     * @param {Edge} edgeObj\n     * The edge to remove.\n     *\n     * @ignore\n     */\n    removeIncomingEdge(edgeObj) {\n        const edgeId = edgeObj.id;\n        const sourceId = edgeObj.sourceId;\n\n        this.adjacencyLists.all.delete(sourceId, edgeId);\n        this.adjacencyLists.inc.delete(sourceId, edgeId);\n        this.incidenceLists.all.delete(edgeId);\n        this.incidenceLists.inc.delete(edgeId);\n    }\n\n    /**\n     * Returns a textual representation of this node.\n     *\n     * @return {String}\n     * A textual representation of this node.\n     *\n     * @override\n     */\n    toString() {\n        return this.id;\n    }\n\n    /**\n     * Returns a JSON representation of this node.\n     *\n     * @return {Object}\n     * A JSON representation of this node.\n     */\n    toJSON() {\n        return {\n            id: this.id\n        };\n    }\n}\n\n/**\n * Provides IDs.\n *\n * @type {IDGenerator}\n * @private\n */\nNode.idGenerator = new IDGenerator(\"n\");\n"
  },
  {
    "__docId__": 52,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Node",
    "memberof": "src/Node.js",
    "longname": "src/Node.js~Node",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/Node.js",
    "importStyle": "Node",
    "description": "A node in a graph.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromJSON",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node.fromJSON",
    "access": null,
    "description": "Turns a plain JSON object back to a Node object.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "The plain object to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": "The resulting node object."
    },
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#constructor",
    "access": null,
    "description": "",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "id",
        "description": "The ID of this node."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#id",
    "access": null,
    "description": "The ID of this node.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "graph",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#graph",
    "access": null,
    "description": "The graph that contains this node. This property will be set after\nadding the node to a graph.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "adjacencyLists",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#adjacencyLists",
    "access": "private",
    "description": "Stores information about adjacent nodes.",
    "lineNumber": 64,
    "properties": [
      {
        "nullable": null,
        "types": [
          "GumpMap"
        ],
        "spread": false,
        "optional": false,
        "name": "adjacencyLists.all",
        "description": "Maps from IDs of all adjacent nodes to the IDs of the edges between\nthe nodes."
      },
      {
        "nullable": null,
        "types": [
          "GumpMap"
        ],
        "spread": false,
        "optional": false,
        "name": "adjacencyLists.out",
        "description": "Maps from the IDs of all nodes that are the target node of at least\none edge starting at this node to the corresponding edge IDs."
      },
      {
        "nullable": null,
        "types": [
          "GumpMap"
        ],
        "spread": false,
        "optional": false,
        "name": "adjacencyLists.inc",
        "description": "Maps from the IDs of all nodes that are the source node of at least\none edge ending at this node to the corresponding edge IDs."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "incidenceLists",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#incidenceLists",
    "access": "private",
    "description": "Stores information about incident edges.",
    "lineNumber": 86,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Set<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "incidenceLists.all",
        "description": "The IDs of all incident edges."
      },
      {
        "nullable": null,
        "types": [
          "Set<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "incidenceLists.out",
        "description": "The IDs of all outgoing edges."
      },
      {
        "nullable": null,
        "types": [
          "Set<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "incidenceLists.inc",
        "description": "The IDs of all incoming edges."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterAdjacentNodes",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#iterAdjacentNodes",
    "access": null,
    "description": "Iterates over the IDs of adjacent nodes. The result depends on the\ngiven direction.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": All adjacent nodes are considered.\n* \"out\": Only nodes that are the target node of at least one edge\nstarting at this node are selected.\n* \"inc\": Only nodes that are the source node of at least one edge ending\nat this node are chosen."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNumberOfAdjacentNodes",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#getNumberOfAdjacentNodes",
    "access": null,
    "description": "Returns the number of adjacent nodes. The result depends on the given\ndirection.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": All adjacent nodes are considered.\n* \"out\": Only nodes that are the target node of at least one edge\nstarting at this node are selected.\n* \"inc\": Only nodes that are the source node of at least one edge ending\nat this node are chosen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of adjacent nodes."
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isAdjacentNode",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#isAdjacentNode",
    "access": null,
    "description": "Returns if the given node is adjacent to this one. The result depends on\nthe supplied direction.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to test for adjacency. Specifying the ID is sufficient."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": All adjacent nodes are considered.\n* \"out\": Only nodes that are the target node of at least one edge\nstarting at this node are selected.\n* \"inc\": Only nodes that are the source node of at least one edge ending\nat this node are chosen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the given node is adjacent to this one."
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterEdgesBetween",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#iterEdgesBetween",
    "access": null,
    "description": "Iterates over the IDs of the edges between this node and the given node.\nThe result depends on the direction.",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The other ending point of the edges. Passing in an ID is enough."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": All edges between the two nodes are considered.\n* \"out\": Only edges that start at this node and end at the given one are\nselected.\n* \"inc\": Only edges that start at the given node and end at this one are\nchosen."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNumberOfEdgesBetween",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#getNumberOfEdgesBetween",
    "access": null,
    "description": "Returns the number of edges between this node and the given node. The\nresult depends on the direction.",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The other ending point of the edges. Specifying an ID is enough."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": All edges between the two nodes are considered.\n* \"out\": Only edges that start at this node and end at the given one are\nselected.\n* \"inc\": Only edges that start at the given node and end at this one are\nchosen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of edges between this node and the given node."
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEdgeBetween",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#isEdgeBetween",
    "access": null,
    "description": "Returns if the given edge is incident to this node and the given one. The\nresult depends on the specified direction. Passing in the ID for the node\nor the edge is enough.",
    "lineNumber": 235,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The other ending point of the edge. Giving an ID suffices."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "The edge to test. Specifying an ID is enough."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": All edges between the two nodes are considered.\n* \"out\": Only edges that start at this node and end at the given one are\nselected.\n* \"inc\": Only edges that start at the given node and end at this one are\nchosen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the given edge is incident to this node and the given one."
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "iterIncidentEdges",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#iterIncidentEdges",
    "access": null,
    "description": "Iterates over the IDs of incident edges. The result depends on the\ndirection.",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": All incident edges are considered.\n* \"out\": Only edges that start at this node are selected.\n* \"inc\": Only edges that end at this node are chosen."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 66,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNumberOfIncidentEdges",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#getNumberOfIncidentEdges",
    "access": null,
    "description": "Returns the the degree of this node. This is the number of incident\nedges. The result depends on the direction.",
    "lineNumber": 275,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": All incident edges are considered.\n* \"out\": Only edges that start at this node are selected (outdegree).\n* \"inc\": Only edges that end at this node are chosen (indegree)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of selected edges."
    },
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isIncidentEdge",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#isIncidentEdge",
    "access": null,
    "description": "Returns if the given edge is incident to this node. The result depends on\nthe given direction.",
    "lineNumber": 298,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "The edge to test for incidency. Specifying the ID is sufficient."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"all\"",
        "defaultRaw": "all",
        "name": "direction",
        "description": "* \"all\": All incident edges are considered.\n* \"out\": Only edges that start at this node are selected.\n* \"inc\": Only edges that end at this node are chosen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the given edge is incident to this node."
    },
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addOutgoingEdge",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#addOutgoingEdge",
    "access": null,
    "description": "Adds a new outgoing edge.",
    "lineNumber": 316,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeObj",
        "description": "The edge to add."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addIncomingEdge",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#addIncomingEdge",
    "access": null,
    "description": "Adds a new incoming edge.",
    "lineNumber": 334,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeObj",
        "description": "The edge to add."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeOutgoingEdge",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#removeOutgoingEdge",
    "access": null,
    "description": "Removes the given outgoing edge.",
    "lineNumber": 352,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeObj",
        "description": "The edge to remove."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeIncomingEdge",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#removeIncomingEdge",
    "access": null,
    "description": "Removes the given incoming edge.",
    "lineNumber": 370,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeObj",
        "description": "The edge to remove."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#toString",
    "access": null,
    "description": "Returns a textual representation of this node.",
    "lineNumber": 388,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A textual representation of this node."
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toJSON",
    "memberof": "src/Node.js~Node",
    "longname": "src/Node.js~Node#toJSON",
    "access": null,
    "description": "Returns a JSON representation of this node.",
    "lineNumber": 398,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A JSON representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Path.js",
    "memberof": null,
    "longname": "src/Path.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Graph from \"./Graph.js\";\n\n/**\n * A path through a graph.\n */\nexport default class Path {\n\n    /**\n     * Turns a plain JSON object back to a Path object.\n     *\n     * @param {Object} json\n     * The plain object to convert.\n     *\n     * @return {Path}\n     * The resulting path object.\n     */\n    static fromJSON(json) {\n        return new Path(...json.nodes);\n    }\n\n    /**\n     * @param {...String|...Node} nodes\n     * The nodes visited by this path in order. Specifying IDs is enough.\n     */\n    constructor(...nodes) {\n\n        /**\n         * If this path is a cycle. This means the first and last node are the\n         * same and the length of the path is at least 1.\n         *\n         * @type {Boolean}\n         */\n        this.isCycle = true;\n\n        /**\n         * If the path is a simple cycle. This means it is a cycle and no node\n         * except the first and last node is visited twice.\n         *\n         * @type {Boolean}\n         */\n        this.isSimpleCycle = true;\n\n        /**\n         * If the path is simple. This means no node is visited twice.\n         *\n         * @type {Boolean}\n         */\n        this.isSimplePath = true;\n\n        /**\n         * The IDs of the nodes visited by this path in order.\n         *\n         * @type {String[]}\n         * @private\n         */\n        this.nodeIds = [];\n\n        /**\n         * Counts how often a node is visited by this path.\n         *\n         * @type {Map<String, Number>}\n         * @private\n         */\n        this.visitCounter = new Map();\n\n        // Normalize path\n        for (let node of nodes) {\n            const nodeId = Graph.toNodeId(node);\n            this.nodeIds.push(nodeId);\n        }\n\n        // Analyze path\n        for (let i = 0, len = this.nodeIds.length; i < len; i++) {\n            const nodeId = this.nodeIds[i];\n\n            if (this.visitCounter.has(nodeId)) {\n                const c = this.visitCounter.get(nodeId);\n                this.visitCounter.set(nodeId, c + 1);\n                this.isSimplePath = false;\n                if (i < len - 1) {\n                    this.isSimpleCycle = false;\n                }\n            } else {\n                this.visitCounter.set(nodeId, 1);\n            }\n        }\n\n        this.isCycle = this.nodeIds.length > 1 &&\n                       this.nodeIds[0] === this.nodeIds.slice(-1)[0];\n        this.isSimpleCycle = this.isSimpleCycle && this.isCycle;\n    }\n\n    /**\n     * Returns the length of this path. The length is one lower than the number\n     * of nodes on the path.\n     *\n     * @return {Number}\n     * The length of the path.\n     */\n    getLength() {\n        return this.nodeIds.length - 1;\n    }\n\n    /**\n     * Returns how often the given node is visited by the path.\n     *\n     * @param {String|Node} node\n     * The node to test.\n     *\n     * @return {Number}\n     * How often the node is visited.\n     */\n    getNumberOfVisits(node) {\n        node = Graph.toNodeId(node);\n        return this.visitCounter.has(node) ? this.visitCounter.get(node) : 0;\n    }\n\n    /**\n     * Tests if the given node lies on this path.\n     *\n     * @param {String|Node} node\n     * The node to test. Specifying an ID is enough.\n     *\n     * @return {Boolean}\n     * If the given node lies on this path.\n     */\n    isVisited(node) {\n        node = Graph.toNodeId(node);\n        return this.visitCounter.has(node);\n    }\n\n    /**\n     * Returns an array with the IDs of the nodes on the path in order.\n     *\n     * @return {String[]}\n     * The IDs of the nodes on the path.\n     */\n    toArray() {\n        return this.nodeIds;\n    }\n\n    /**\n     * Returns a textual representation of this path.\n     *\n     * @return {String}\n     * A textual representation of this path.\n     */\n    toString() {\n        let result = \"\";\n\n        for (let i = 0, len = this.nodeIds.length; i < len; i++) {\n            result += this.nodeIds[i];\n            if (i < len - 1) {\n                result += \" ~> \";\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a JSON representation of this path.\n     *\n     * @return {Object}\n     * A JSON representation of this path.\n     */\n    toJSON() {\n        return {\n            nodes: this.toArray()\n        };\n    }\n}\n"
  },
  {
    "__docId__": 75,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Path",
    "memberof": "src/Path.js",
    "longname": "src/Path.js~Path",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/Path.js",
    "importStyle": "Path",
    "description": "A path through a graph.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 76,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromJSON",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path.fromJSON",
    "access": null,
    "description": "Turns a plain JSON object back to a Path object.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "The plain object to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": "The resulting path object."
    },
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#constructor",
    "access": null,
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "...String",
          "...Node"
        ],
        "spread": true,
        "optional": false,
        "name": "nodes",
        "description": "The nodes visited by this path in order. Specifying IDs is enough."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isCycle",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#isCycle",
    "access": null,
    "description": "If this path is a cycle. This means the first and last node are the\nsame and the length of the path is at least 1.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isSimpleCycle",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#isSimpleCycle",
    "access": null,
    "description": "If the path is a simple cycle. This means it is a cycle and no node\nexcept the first and last node is visited twice.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isSimplePath",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#isSimplePath",
    "access": null,
    "description": "If the path is simple. This means no node is visited twice.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nodeIds",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#nodeIds",
    "access": "private",
    "description": "The IDs of the nodes visited by this path in order.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "visitCounter",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#visitCounter",
    "access": "private",
    "description": "Counts how often a node is visited by this path.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, Number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isSimplePath",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#isSimplePath",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isSimpleCycle",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#isSimpleCycle",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isCycle",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#isCycle",
    "access": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isSimpleCycle",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#isSimpleCycle",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLength",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#getLength",
    "access": null,
    "description": "Returns the length of this path. The length is one lower than the number\nof nodes on the path.",
    "lineNumber": 100,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The length of the path."
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNumberOfVisits",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#getNumberOfVisits",
    "access": null,
    "description": "Returns how often the given node is visited by the path.",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "How often the node is visited."
    },
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isVisited",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#isVisited",
    "access": null,
    "description": "Tests if the given node lies on this path.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to test. Specifying an ID is enough."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the given node lies on this path."
    },
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toArray",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#toArray",
    "access": null,
    "description": "Returns an array with the IDs of the nodes on the path in order.",
    "lineNumber": 138,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "The IDs of the nodes on the path."
    },
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#toString",
    "access": null,
    "description": "Returns a textual representation of this path.",
    "lineNumber": 148,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A textual representation of this path."
    },
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toJSON",
    "memberof": "src/Path.js~Path",
    "longname": "src/Path.js~Path#toJSON",
    "access": null,
    "description": "Returns a JSON representation of this path.",
    "lineNumber": 167,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A JSON representation of this path."
    },
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export Graph from \"./Graph.js\";\nexport Node  from \"./Node.js\";\nexport Edge  from \"./Edge.js\";\nexport Path  from \"./Path.js\";\n\nexport * from \"./layout/index.js\";\n"
  },
  {
    "__docId__": 94,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/layout/EadesLayouter.js",
    "memberof": null,
    "longname": "src/layout/EadesLayouter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Vec2, Vec2Builder} from \"@ignavia/ella\";\n\nimport RandomLayouter from \"./RandomLayouter.js\";\nimport * as utils     from \"./utils.js\";\n\n/**\n * Layouts nodes using the Eades layout algorithm.\n */\nexport default class EadesLayouter {\n\n    /**\n     * @param {Object} [obj={}]\n     * The options object.\n     *\n     * @param {Vec2} [obj.randomPos=new Vec2(0, 0)]\n     * The top left corner of the bounding rectangle of the initial random\n     * layout.\n     *\n     * @param {number} [obj.randomWidth=1920]\n     * The width of the bounding rectangle of the initial random layout.\n     *\n     * @param {number} [obj.randomHeight=1080]\n     * The height of the bounding rectangle of the initial random layout.\n     *\n     * @param {number} [obj.springForceCoef=2]\n     * The spring force between two adjacent nodes scales linearly with this\n     * parameter.\n     *\n     * @param {number} [obj.idealDistance=200]\n     * If the distance between two adjacent nodes equals this value, the force\n     * is 0.\n     *\n     * @param {number} [obj.repulsiveForceCoef=1]\n     * The repulsive force between two non-adjacent nodes scales linearly with\n     * this parameter.\n     *\n     * @param {number} [obj.forceToDistanceCoef=0.1]\n     * The conversion from a force to a translation scales linearly with this\n     * value.\n     *\n     * @param {number} [obj.nSteps=100]\n     * The number of simulation steps.\n     */\n    constructor ({\n        randomPos           = new Vec2(0, 0),\n        randomWidth         = 1920,\n        randomHeight        = 1080,\n        springForceCoef     = 2,\n        idealDistance       = 500,\n        repulsiveForceCoef  = 30000,\n        forceToDistanceCoef = 1,\n        nSteps              = 100,\n    } = {}) {\n\n        /**\n         * Creates the initial random layout.\n         *\n         * @type {RandomLayouter}\n         * @private\n         */\n        this.randomLayouter = new RandomLayouter({\n            pos:    randomPos,\n            width:  randomWidth,\n            height: randomHeight,\n        });\n\n        /**\n         * The spring force between two adjacent nodes scales linearly with\n         * this parameter.\n         *\n         * @type {number}\n         * @private\n         */\n        this.springForceCoef = springForceCoef;\n\n        /**\n         * If the distance between two adjacent nodes equals this value, the\n         * force is 0.\n         *\n         * @type {number}\n         * @private\n         */\n        this.idealDistance = idealDistance;\n\n        /**\n         * The repulsive force between two non-adjacent nodes scales linearly\n         * with this parameter.\n         *\n         * @type {number}\n         * @private\n         */\n        this.repulsiveForceCoef = repulsiveForceCoef;\n\n        /**\n         * The conversion from a force vector to a displacement vector scales\n         * linearly with this value.\n         *\n         * @type {number}\n         * @private\n         */\n        this.forceToDistanceCoef = forceToDistanceCoef;\n\n        /**\n         * The number of simulation steps.\n         *\n         * @type {number}\n         * @private\n         */\n        this.nSteps = nSteps;\n\n        /**\n         * Stores the force of one node on another node.\n         *\n         * @type {Vec2Builder}\n         * @private\n         */\n        this.singleForceAcc = new Vec2Builder(0, 0);\n\n        /**\n         * Stores the force on a node.\n         *\n         * @type {Vec2Builder}\n         * @private\n         */\n        this.nodeForceAcc = new Vec2Builder(0, 0);\n    }\n\n    /**\n     * Calculates the the spring force between two adjacent nodes.\n     *\n     * @param {Vec2} uPos\n     * The position of the first node.\n     *\n     * @param {Vec2} vPos\n     * The position of the second node.\n     *\n     * @return {Vec2}\n     * The force vector.\n     *\n     * @private\n     */\n    computeSpringForce(uPos, vPos) {\n        const {distance, direction} = utils.computeConnection(\n            uPos,\n            vPos,\n            this.singleForceAcc\n        );\n        const forceMagnitude = this.springForceCoef * Math.log(distance / this.idealDistance);\n        return direction.mul(forceMagnitude);\n    }\n\n    /**\n     * Calculated the the repulsive force between non-adjacent nodes.\n     *\n     * @param {Vec2} uPos\n     * The position of the first node.\n     *\n     * @param {Vec2} vPos\n     * The position of the second node.\n     *\n     * @return {Vec2}\n     * The force vector.\n     *\n     * @private\n     */\n    computeRepulsiveForce(uPos, vPos) {\n        let {distance, direction} = utils.computeConnection(\n            uPos,\n            vPos,\n            this.singleForceAcc\n        );\n        const forceMagnitude = -this.repulsiveForceCoef / distance**2;\n        return direction.mul(forceMagnitude);\n    }\n\n    /**\n     * Calculates the force on the given node given a layout.\n     *\n     * @param {Graph} graph\n     * The graph to layout.\n     *\n     * @param {Map} layout\n     * The current layout of the graph.\n     *\n     * @param {Node} u\n     * The node to calculate the force for.\n     *\n     * @return {Vec2}\n     * The force on the given node.\n     *\n     * @private\n     */\n    computeForceForNode(graph, layout, u) {\n        this.nodeForceAcc.x = 0;\n        this.nodeForceAcc.y = 0;\n\n        const uPos = layout.getPosition(u);\n\n        for (let v of graph.iterNodes()) {\n            if (u !== v) {\n                const vPos = layout.getPosition(v);\n                let force  = u.isAdjacentNode(v) ?\n                    this.computeSpringForce(uPos, vPos)   :\n                    this.computeRepulsiveForce(uPos, vPos);\n                this.nodeForceAcc.add(force);\n            }\n        }\n\n        return this.nodeForceAcc.toVec2();\n    }\n\n    /**\n     * Calculates the forces on the nodes given the current layout.\n     *\n     * @param {Graph} graph\n     * The graph to layout.\n     *\n     * @param {Map} layout\n     * The current layout of the graph.\n     *\n     * @return {Map}\n     * The force on the nodes.\n     *\n     * @private\n     */\n    computeForces(graph, layout) {\n        const result = new Map();\n\n        for (let u of graph.iterNodes()) {\n            const force = this.computeForceForNode(graph, layout, u);\n            result.set(u.id, force);\n        }\n\n        return result;\n    }\n\n    /**\n     * Moves the nodes according to the forces calculated in a simulation step.\n     *\n     * @param {Map} layout\n     * The current layout of the graph.\n     *\n     * @param {Map} forces\n     * The calculated forces.\n     *\n     * @private\n     */\n    adjustLayout(layout, forces) {\n        for (let [id, force] of forces) {\n            const displacement = force.mul(this.forceToDistanceCoef);\n            layout.moveNodeBy(id, displacement);\n        }\n    }\n\n    /**\n     * Layouts the graph using the Eades layout algorithm.\n     *\n     * @param {Graph} graph\n     * The graph to layout.\n     *\n     * @param {Layout} [layout]\n     * The previous layout. If none is provided, a random layout is generated.\n     *\n     * @return {Layout}\n     * The new layout.\n     */\n    layout(graph, layout = this.randomLayouter.layout(graph)) {\n        for (let i = 0; i < this.nSteps; i++) {\n            const forces = this.computeForces(graph, layout);\n            this.adjustLayout(layout, forces);\n        }\n\n        return layout;\n    }\n}\n"
  },
  {
    "__docId__": 95,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EadesLayouter",
    "memberof": "src/layout/EadesLayouter.js",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/layout/EadesLayouter.js",
    "importStyle": "EadesLayouter",
    "description": "Layouts nodes using the Eades layout algorithm.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#constructor",
    "access": null,
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "obj",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "new",
        "defaultRaw": "new",
        "name": "obj.randomPos",
        "description": "Vec2(0, 0)]\nThe top left corner of the bounding rectangle of the initial random\nlayout."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1920",
        "defaultRaw": 1920,
        "name": "obj.randomWidth",
        "description": "The width of the bounding rectangle of the initial random layout."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1080",
        "defaultRaw": 1080,
        "name": "obj.randomHeight",
        "description": "The height of the bounding rectangle of the initial random layout."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "obj.springForceCoef",
        "description": "The spring force between two adjacent nodes scales linearly with this\nparameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "200",
        "defaultRaw": 200,
        "name": "obj.idealDistance",
        "description": "If the distance between two adjacent nodes equals this value, the force\nis 0."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "obj.repulsiveForceCoef",
        "description": "The repulsive force between two non-adjacent nodes scales linearly with\nthis parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.1",
        "defaultRaw": 0.1,
        "name": "obj.forceToDistanceCoef",
        "description": "The conversion from a force to a translation scales linearly with this\nvalue."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "obj.nSteps",
        "description": "The number of simulation steps."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "randomLayouter",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#randomLayouter",
    "access": "private",
    "description": "Creates the initial random layout.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "RandomLayouter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "springForceCoef",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#springForceCoef",
    "access": "private",
    "description": "The spring force between two adjacent nodes scales linearly with\nthis parameter.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "idealDistance",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#idealDistance",
    "access": "private",
    "description": "If the distance between two adjacent nodes equals this value, the\nforce is 0.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "repulsiveForceCoef",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#repulsiveForceCoef",
    "access": "private",
    "description": "The repulsive force between two non-adjacent nodes scales linearly\nwith this parameter.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "forceToDistanceCoef",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#forceToDistanceCoef",
    "access": "private",
    "description": "The conversion from a force vector to a displacement vector scales\nlinearly with this value.",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nSteps",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#nSteps",
    "access": "private",
    "description": "The number of simulation steps.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "singleForceAcc",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#singleForceAcc",
    "access": "private",
    "description": "Stores the force of one node on another node.",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "Vec2Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nodeForceAcc",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#nodeForceAcc",
    "access": "private",
    "description": "Stores the force on a node.",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "Vec2Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeSpringForce",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#computeSpringForce",
    "access": "private",
    "description": "Calculates the the spring force between two adjacent nodes.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "uPos",
        "description": "The position of the first node."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "vPos",
        "description": "The position of the second node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The force vector."
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeRepulsiveForce",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#computeRepulsiveForce",
    "access": "private",
    "description": "Calculated the the repulsive force between non-adjacent nodes.",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "uPos",
        "description": "The position of the first node."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "vPos",
        "description": "The position of the second node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The force vector."
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeForceForNode",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#computeForceForNode",
    "access": "private",
    "description": "Calculates the force on the given node given a layout.",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to layout."
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The current layout of the graph."
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "u",
        "description": "The node to calculate the force for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The force on the given node."
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeForces",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#computeForces",
    "access": "private",
    "description": "Calculates the forces on the nodes given the current layout.",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to layout."
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The current layout of the graph."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": "The force on the nodes."
    },
    "generator": false
  },
  {
    "__docId__": 109,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "adjustLayout",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#adjustLayout",
    "access": "private",
    "description": "Moves the nodes according to the forces calculated in a simulation step.",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The current layout of the graph."
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "forces",
        "description": "The calculated forces."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "layout",
    "memberof": "src/layout/EadesLayouter.js~EadesLayouter",
    "longname": "src/layout/EadesLayouter.js~EadesLayouter#layout",
    "access": null,
    "description": "Layouts the graph using the Eades layout algorithm.",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to layout."
      },
      {
        "nullable": null,
        "types": [
          "Layout"
        ],
        "spread": false,
        "optional": true,
        "name": "layout",
        "description": "The previous layout. If none is provided, a random layout is generated."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "The new layout."
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/layout/FruchtermanLayouter.js",
    "memberof": null,
    "longname": "src/layout/FruchtermanLayouter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Vec2, Vec2Builder} from \"@ignavia/ella\";\n\nimport RandomLayouter from \"./RandomLayouter\";\nimport * as utils     from \"./utils.js\";\n\n/**\n * Layout the graph using the Fruchterman-Reingold layout algorithm.\n */\nexport default class FruchtermannLayouter {\n\n    /**\n     * @param {Object} [obj={}]\n     * The options object.\n     *\n     * @param {Vec2} [obj.pos=new Vec2(0, 0)]\n     * The top left corner of the bounding rectangle of the layout.\n     *\n     * @param {number} [obj.width=1920]\n     * The width of the bounding rectangle of the layout.\n     *\n     * @param {number} [obj.height=1080]\n     * The height of the bounding rectangle of the layout.\n     *\n     * @param {number} [obj.idealDistanceCoef=1]\n     * The ideal distance between nodes scales linearly with this factor.\n     *\n     * @param {number} [initialMaxDisplacement]\n     * Nodes are only moved this much during the first simulation step. This\n     * maximum displacement goes down to 0 in a linear fashion for later\n     * simulation steps.\n     *\n     * @param {number} [obj.nSteps=100]\n     * The number of simulation steps.\n     */\n    constructor ({\n        pos                    = new Vec2(0, 0),\n        width                  = 1920,\n        height                 = 1080,\n        idealDistanceCoef      = 1,\n        initialMaxDisplacement = width / 10,\n        nSteps                 = 50,\n    } = {}) {\n\n        /**\n         * Creates the initial random layout.\n         *\n         * @type {RandomLayouter}\n         * @private\n         */\n        this.randomLayouter = new RandomLayouter({ pos, width, height, });\n\n        /**\n         * The top left corner of the bounding rectangle.\n         *\n         * @type {Vec2}\n         * @private\n         */\n        this.min = pos;\n\n        /**\n         * The botton right corner of the bounding rectangle.\n         *\n         * @type {Vec2}\n         * @private\n         */\n        this.max = new Vec2(\n            pos.x + width,\n            pos.y + height\n        );\n\n        /**\n         * The area of the bounding rectangle.\n         *\n         * @type {number}\n         * @private\n         */\n        this.area = width * height;\n\n        /**\n         * The ideal distance between nodes scales linearly with this factor.\n         *\n         * @type {number}\n         * @private\n         */\n        this.idealDistanceCoef = idealDistanceCoef;\n\n        /**\n         * Nodes are only moved this much during the first simulation step. This\n         * maximum displacement goes down to 0 in a linear fashion for later\n         * simulation steps.\n         *\n         * @type {Number}\n         * @private\n         */\n        this.initialMaxDisplacement = initialMaxDisplacement;\n\n        /**\n         * The number of simulation steps.\n         *\n         * @type {number}\n         * @private\n         */\n        this.nSteps = nSteps;\n\n        /**\n         * Stores the force of one node on another node.\n         *\n         * @type {Vec2Builder}\n         * @private\n         */\n        this.singleForceAcc = new Vec2Builder(0, 0);\n\n        /**\n         * Stores the force on a node.\n         *\n         * @type {Vec2Builder}\n         * @private\n         */\n        this.nodeForceAcc = new Vec2Builder(0, 0);\n    }\n\n    /**\n     * Computes the ideal distance between nodes for the given graph.\n     *\n     * @param {Graph} graph\n     * The graph to layout.\n     *\n     * @return {number}\n     * A proposed distance between nodes.\n     *\n     * @private\n     */\n    computeIdealDistance(graph) {\n        return this.idealDistanceCoef * Math.sqrt(this.area / graph.getNumberOfNodes());\n    }\n\n    /**\n     * Calculates the the attractive force between two adjacent nodes.\n     *\n     * @param {Vec2} uPos\n     * The position of the first node.\n     *\n     * @param {Vec2} vPos\n     * The position of the second node.\n     *\n     * @return {Vec2}\n     * The force vector.\n     *\n     * @private\n     */\n    computeAttractiveForce(uPos, vPos, idealDistance) {\n        const {distance, direction} = utils.computeConnection(\n            uPos,\n            vPos,\n            this.singleForceAcc\n        );\n        const forceMagnitude = distance**2 / idealDistance;\n        return direction.mul(forceMagnitude);\n    }\n\n    /**\n     * Calculates the the repulsive force between two non-adjacent nodes.\n     *\n     * @param {Vec2} uPos\n     * The position of the first node.\n     *\n     * @param {Vec2} vPos\n     * The position of the second node.\n     *\n     * @return {Vec2}\n     * The force vector.\n     *\n     * @private\n     */\n    computeRepulsiveForce(uPos, vPos, idealDistance) {\n        let {distance, direction} = utils.computeConnection(\n            uPos,\n            vPos,\n            this.singleForceAcc\n        );\n        const forceMagnitude = -(idealDistance**2) / distance;\n        return direction.mul(forceMagnitude);\n    }\n\n    /**\n     * Computes the maximum displacement that should occur in the given\n     * simulation step.\n     *\n     * @param {number} step\n     * The simulation step.\n     *\n     * @return {number}\n     * The maximum displacement.\n     *\n     * @private\n     */\n    computeMaxDisplacement(step) {\n        return this.initialMaxDisplacement * (1 - step / this.nSteps);\n    }\n\n    /**\n     * Calculates the force on the given node given a layout.\n     *\n     * @param {Graph} graph\n     * The graph to layout.\n     *\n     * @param {Map} layout\n     * The current layout of the graph.\n     *\n     * @param {number} idealDistance\n     * How far the nodes should ideally be apart.\n     *\n     * @param {Node} u\n     * The node to calculate the force for.\n     *\n     * @return {Vec2}\n     * The force on the given node.\n     *\n     * @private\n     */\n    computeForceForNode(graph, layout, idealDistance, u) {\n        this.nodeForceAcc.x = 0;\n        this.nodeForceAcc.y = 0;\n\n        const uPos = layout.getPosition(u);\n\n        for (let v of graph.iterNodes()) {\n            if (u !== v) {\n                const vPos          = layout.getPosition(v);\n                const repulsive     = this.computeRepulsiveForce(uPos, vPos, idealDistance);\n                this.nodeForceAcc.add(repulsive);\n                const nEdgesBetween = u.getNumberOfEdgesBetween(v, \"out\");\n                const attractive    = this.computeAttractiveForce(uPos, vPos, idealDistance).mul(nEdgesBetween);\n                this.nodeForceAcc.add(attractive);\n            }\n        }\n\n        return this.nodeForceAcc.toVec2();\n    }\n\n    /**\n     * Calculates the forces on the nodes given the current layout.\n     *\n     * @param {Graph} graph\n     * The graph to layout.\n     *\n     * @param {Map} layout\n     * The current layout of the graph.\n     *\n     * @param {number} idealDistance\n     * How far the nodes should ideally be apart.\n     *\n     * @return {Map}\n     * The force on the nodes.\n     *\n     * @private\n     */\n    computeForces(graph, layout, idealDistance) {\n        const result = new Map();\n\n        for (let u of graph.iterNodes()) {\n            const force = this.computeForceForNode(\n                graph, layout, idealDistance, u\n            );\n            result.set(u.id, force);\n        }\n\n        return result;\n    }\n\n    /**\n     * Moves the nodes according to the forces calculated in a simulation step.\n     *\n     * @param {Map} layout\n     * The current layout of the graph.\n     *\n     * @param {Map} forces\n     * The calculated forces.\n     *\n     * @param {number} maxDisplacement\n     * The maximum distance to move a node.\n     *\n     * @private\n     */\n    adjustLayout(layout, forces, maxDisplacement) {\n        for (let [id, force] of forces) {\n            const displacement = this.limitDisplacement(force, maxDisplacement);\n            const oldPos = layout.getPosition(id);\n            const newPos = oldPos.add(displacement);\n            layout.moveNodeTo(id, this.clipToFrame(newPos));\n        }\n    }\n\n    /**\n     * Limits the displacement distance to the maximum displacement in the\n     * current simulation step.\n     *\n     * @param {Vec2} displacement\n     * The suggested displacement\n     *\n     * @param {number} maxDisplacement\n     * The maximum displacement distance.\n     *\n     * @return {Vec2}\n     * The new displacement.\n     *\n     * @private\n     */\n    limitDisplacement(displacement, maxDisplacement) {\n        const distance  = Math.min(maxDisplacement, displacement.length());\n        const direction = displacement.normalize();\n        return direction.mul(distance);\n    }\n\n    /**\n     * Makes sure the given position is within the bounding rectangle.\n     *\n     * @param {Vec2} pos\n     * The suggested position.\n     *\n     * @return {Vec2}\n     * The clipped position.\n     *\n     * @private\n     */\n    clipToFrame(pos) {\n        return new Vec2(\n        \tMath.max(this.min.x, Math.min(pos.x, this.max.x)),\n        \tMath.max(this.min.y, Math.min(pos.y, this.max.y))\n        );\n    }\n\n    /**\n     * Layouts the graph using the Fruchterman-Reingold layout algorithm.\n     *\n     * @param {Graph} graph\n     * The graph to layout.\n     *\n     * @param {Layout} [layout]\n     * The previous layout. If none is provided, a random layout is generated.\n     *\n     * @return {Layout}\n     * The new layout.\n     */\n    layout(graph, layout = this.randomLayouter.layout(graph)) {\n        const idealDistance = this.computeIdealDistance(graph);\n\n        for (let i = 0; i < this.nSteps; i++) {\n            const forces          = this.computeForces(graph, layout, idealDistance);\n            const maxDisplacement = this.computeMaxDisplacement(i);\n            this.adjustLayout(layout, forces, maxDisplacement);\n        }\n\n        return layout;\n    }\n}\n"
  },
  {
    "__docId__": 112,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FruchtermannLayouter",
    "memberof": "src/layout/FruchtermanLayouter.js",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/layout/FruchtermanLayouter.js",
    "importStyle": "FruchtermannLayouter",
    "description": "Layout the graph using the Fruchterman-Reingold layout algorithm.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#constructor",
    "access": null,
    "description": "",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "obj",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "new",
        "defaultRaw": "new",
        "name": "obj.pos",
        "description": "Vec2(0, 0)]\nThe top left corner of the bounding rectangle of the layout."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1920",
        "defaultRaw": 1920,
        "name": "obj.width",
        "description": "The width of the bounding rectangle of the layout."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1080",
        "defaultRaw": 1080,
        "name": "obj.height",
        "description": "The height of the bounding rectangle of the layout."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "obj.idealDistanceCoef",
        "description": "The ideal distance between nodes scales linearly with this factor."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "initialMaxDisplacement",
        "description": "Nodes are only moved this much during the first simulation step. This\nmaximum displacement goes down to 0 in a linear fashion for later\nsimulation steps."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "obj.nSteps",
        "description": "The number of simulation steps."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "randomLayouter",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#randomLayouter",
    "access": "private",
    "description": "Creates the initial random layout.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "RandomLayouter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "min",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#min",
    "access": "private",
    "description": "The top left corner of the bounding rectangle.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "max",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#max",
    "access": "private",
    "description": "The botton right corner of the bounding rectangle.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "area",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#area",
    "access": "private",
    "description": "The area of the bounding rectangle.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "idealDistanceCoef",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#idealDistanceCoef",
    "access": "private",
    "description": "The ideal distance between nodes scales linearly with this factor.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "initialMaxDisplacement",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#initialMaxDisplacement",
    "access": "private",
    "description": "Nodes are only moved this much during the first simulation step. This\nmaximum displacement goes down to 0 in a linear fashion for later\nsimulation steps.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nSteps",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#nSteps",
    "access": "private",
    "description": "The number of simulation steps.",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "singleForceAcc",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#singleForceAcc",
    "access": "private",
    "description": "Stores the force of one node on another node.",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "Vec2Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nodeForceAcc",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#nodeForceAcc",
    "access": "private",
    "description": "Stores the force on a node.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "Vec2Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeIdealDistance",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#computeIdealDistance",
    "access": "private",
    "description": "Computes the ideal distance between nodes for the given graph.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to layout."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A proposed distance between nodes."
    },
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeAttractiveForce",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#computeAttractiveForce",
    "access": "private",
    "description": "Calculates the the attractive force between two adjacent nodes.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "uPos",
        "description": "The position of the first node."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "vPos",
        "description": "The position of the second node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The force vector."
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeRepulsiveForce",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#computeRepulsiveForce",
    "access": "private",
    "description": "Calculates the the repulsive force between two non-adjacent nodes.",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "uPos",
        "description": "The position of the first node."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "vPos",
        "description": "The position of the second node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The force vector."
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeMaxDisplacement",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#computeMaxDisplacement",
    "access": "private",
    "description": "Computes the maximum displacement that should occur in the given\nsimulation step.",
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": "The simulation step."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The maximum displacement."
    },
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeForceForNode",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#computeForceForNode",
    "access": "private",
    "description": "Calculates the force on the given node given a layout.",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to layout."
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The current layout of the graph."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "idealDistance",
        "description": "How far the nodes should ideally be apart."
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "u",
        "description": "The node to calculate the force for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The force on the given node."
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeForces",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#computeForces",
    "access": "private",
    "description": "Calculates the forces on the nodes given the current layout.",
    "lineNumber": 258,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to layout."
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The current layout of the graph."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "idealDistance",
        "description": "How far the nodes should ideally be apart."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": "The force on the nodes."
    },
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "adjustLayout",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#adjustLayout",
    "access": "private",
    "description": "Moves the nodes according to the forces calculated in a simulation step.",
    "lineNumber": 285,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "layout",
        "description": "The current layout of the graph."
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "forces",
        "description": "The calculated forces."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxDisplacement",
        "description": "The maximum distance to move a node."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "limitDisplacement",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#limitDisplacement",
    "access": "private",
    "description": "Limits the displacement distance to the maximum displacement in the\ncurrent simulation step.",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "displacement",
        "description": "The suggested displacement"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxDisplacement",
        "description": "The maximum displacement distance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The new displacement."
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clipToFrame",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#clipToFrame",
    "access": "private",
    "description": "Makes sure the given position is within the bounding rectangle.",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "The suggested position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The clipped position."
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "layout",
    "memberof": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter",
    "longname": "src/layout/FruchtermanLayouter.js~FruchtermannLayouter#layout",
    "access": null,
    "description": "Layouts the graph using the Fruchterman-Reingold layout algorithm.",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to layout."
      },
      {
        "nullable": null,
        "types": [
          "Layout"
        ],
        "spread": false,
        "optional": true,
        "name": "layout",
        "description": "The previous layout. If none is provided, a random layout is generated."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "The new layout."
    },
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/layout/Layout.js",
    "memberof": null,
    "longname": "src/layout/Layout.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Vec2} from \"@ignavia/ella\";\n\nimport Graph from \"../Graph.js\";\n\n/**\n * A graph layout.\n */\nexport default class Layout {\n\n    /**\n     * Parses the given object and creates a layout using its content.\n     *\n     * @param {Object} json\n     * The object to parse.\n     *\n     * @return {Layout}\n     * The created layout.\n     */\n    static fromJSON(json) {\n        const result = new Layout();\n        for (let [id, position] of Object.entries(json)) {\n            result.moveNodeTo(id, Vec2.fromJSON(position));\n        }\n        return result;\n    }\n\n    /**\n     * @param {Iterable} [positions=[]]\n     * The positions of the nodes. Each entry has the form [node, position].\n     */\n    constructor(positions = []) {\n\n        /**\n         * Maps from node IDs to positions.\n         *\n         * @type {Map<string, Vec2>}\n         * @private\n         */\n        this.positions = new Map();\n\n        // Initial positions\n        for (let [node, position] of positions) {\n            node = Graph.toNodeId(node);\n            this.moveNodeTo(node, position);\n        }\n    }\n\n    /**\n     * Returns the position of the given node.\n     *\n     * @param {string|Node} node\n     * The node to get the position for or its ID.\n     *\n     * @return {Vec2}\n     * The position of the node.\n     */\n    getPosition(node) {\n        node = Graph.toNodeId(node);\n        return this.positions.get(node);\n    }\n\n    /**\n     * Moves the given node to the new position.\n     *\n     * @param {string|Node} node\n     * The node to move or its ID.\n     *\n     * @param {Vec2} newPosition\n     * The new position of the node.\n     */\n    moveNodeTo(node, newPosition) {\n        node = Graph.toNodeId(node);\n        this.positions.set(node, newPosition);\n    }\n\n    /**\n     * Translates the given node by the given vector.\n     *\n     * @param {string|Node} node\n     * The node to move or its ID.\n     *\n     * @param {Vec2} vector\n     * The vector to add to the current position.\n     */\n    moveNodeBy(node, vector) {\n        const position = this.getPosition(node);\n        this.moveNodeTo(node, position.add(vector));\n    }\n\n    /**\n     * Translates all positions by the given vector.\n     *\n     * @param {Vec2} vector\n     * The vector to add to the positions.\n     */\n    moveAllBy(vector) {\n        for (let [id, position] of this) {\n            this.moveNodeTo(id, position.add(vector));\n        }\n    }\n\n    /**\n     * Stretches the layout from the given center by the given factors.\n     *\n     * @param {number} factorX\n     * The factor by which to stretch the layout in the x-direction.\n     *\n     * @param {number} factorY\n     * The factor by which to stretch the layout in the y-direction.\n     *\n     * @param {Vec2} [center]\n     * The point from which to stretch the layout. By default both the x- and\n     * y-coordinates are 0.\n     */\n    scaleAll(factorX, factorY, center = new Vec2(0, 0)) {\n        this.moveAllBy(center.mul(-1));\n        for (let [id, position] of this) {\n            const newPos = new Vec2(\n                position.x * factorX,\n                position.y * factorY\n            );\n            this.moveNodeTo(id, newPos);\n        }\n        this.moveAllBy(center);\n    }\n\n    /**\n     * Rotates the layout around the given center by the given angle.\n     *\n     * @param {number} angle\n     * The angle by which to rotate the layout.\n     *\n     * @param {Vec2} [center]\n     * The point around which to rotate the layout. By default both the x- and\n     * y-coordinates are 0.\n     */\n    rotateAll(angle, center = new Vec2(0, 0)) {\n        this.moveAllBy(center.mul(-1));\n        for (let [id, position] of this) {\n            this.moveNodeTo(id, position.rotate(angle));\n        }\n        this.moveAllBy(center);\n    }\n\n    /**\n     * Yields all pairs [id, position].\n     */\n    * [Symbol.iterator]() {\n        yield* this.positions;\n    }\n\n    /**\n     * Serializes this layout.\n     *\n     * @return {Object}\n     * The serialized layout.\n     */\n    toJSON() {\n        const result = {};\n        for (let [id, position] of this) {\n            result[id] = position.toJSON();\n        }\n        return result;\n    }\n}\n"
  },
  {
    "__docId__": 134,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Layout",
    "memberof": "src/layout/Layout.js",
    "longname": "src/layout/Layout.js~Layout",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/layout/Layout.js",
    "importStyle": "Layout",
    "description": "A graph layout.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 135,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromJSON",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout.fromJSON",
    "access": null,
    "description": "Parses the given object and creates a layout using its content.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "The object to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "The created layout."
    },
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#constructor",
    "access": null,
    "description": "",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "positions",
        "description": "The positions of the nodes. Each entry has the form [node, position]."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "positions",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#positions",
    "access": "private",
    "description": "Maps from node IDs to positions.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, Vec2>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPosition",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#getPosition",
    "access": null,
    "description": "Returns the position of the given node.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to get the position for or its ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": "The position of the node."
    },
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveNodeTo",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#moveNodeTo",
    "access": null,
    "description": "Moves the given node to the new position.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to move or its ID."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "newPosition",
        "description": "The new position of the node."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveNodeBy",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#moveNodeBy",
    "access": null,
    "description": "Translates the given node by the given vector.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to move or its ID."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "vector",
        "description": "The vector to add to the current position."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveAllBy",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#moveAllBy",
    "access": null,
    "description": "Translates all positions by the given vector.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "vector",
        "description": "The vector to add to the positions."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "scaleAll",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#scaleAll",
    "access": null,
    "description": "Stretches the layout from the given center by the given factors.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "factorX",
        "description": "The factor by which to stretch the layout in the x-direction."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "factorY",
        "description": "The factor by which to stretch the layout in the y-direction."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": true,
        "name": "center",
        "description": "The point from which to stretch the layout. By default both the x- and\ny-coordinates are 0."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "rotateAll",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#rotateAll",
    "access": null,
    "description": "Rotates the layout around the given center by the given angle.",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "The angle by which to rotate the layout."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": true,
        "name": "center",
        "description": "The point around which to rotate the layout. By default both the x- and\ny-coordinates are 0."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#[Symbol.iterator]",
    "access": null,
    "description": "Yields all pairs [id, position].",
    "lineNumber": 148,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 145,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toJSON",
    "memberof": "src/layout/Layout.js~Layout",
    "longname": "src/layout/Layout.js~Layout#toJSON",
    "access": null,
    "description": "Serializes this layout.",
    "lineNumber": 158,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The serialized layout."
    },
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/layout/RandomLayouter.js",
    "memberof": null,
    "longname": "src/layout/RandomLayouter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import _ from \"lodash\";\n\nimport {Vec2} from \"@ignavia/ella\";\n\nimport Layout from \"./Layout.js\";\n\n/**\n * Layouts nodes randomly within a bounding rectangle.\n */\nexport default class RandomLayouter {\n\n    /**\n     * @param {Object} obj\n     * The options object.\n     *\n     * @param {Vec2} [obj.pos=new Vec2(0, 0)]\n     * The top left corner of the bounding rectangle.\n     *\n     * @param {number} [obj.width=1920]\n     * The width of the bounding rectangle.\n     *\n     * @param {number} [obj.height=1080]\n     * The height of the bounding rectangle.\n     */\n    constructor({\n        pos    = new Vec2(0, 0),\n        width  = 1920,\n        height = 1080,\n    } = {}) {\n\n        /**\n         * The top left corner of the bounding rectangle.\n         *\n         * @type {Vec2}\n         * @private\n         */\n        this.min = pos;\n\n        /**\n         * The botton right corner of the bounding rectangle.\n         *\n         * @type {Vec2}\n         * @private\n         */\n        this.max = new Vec2(\n            pos.x + width,\n            pos.y + height\n        );\n    }\n\n    /**\n     * Moves the nodes in the given graph to a random position and returns the\n     * layout. The range of the x- and y-values can be restricted.\n     *\n     * @param {Graph} graph\n     * The graph to layout.\n     *\n     * @return {Layout}\n     * The resulting layout.\n     */\n    layout(graph) {\n        const result = new Layout();\n        for (let node of graph.iterNodes()) {\n            result.moveNodeTo(node.id, new Vec2(\n                _.random(this.min.x, this.max.x, true),\n                _.random(this.min.y, this.max.y, true)\n            ));\n        }\n        return result;\n    }\n}\n"
  },
  {
    "__docId__": 147,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "RandomLayouter",
    "memberof": "src/layout/RandomLayouter.js",
    "longname": "src/layout/RandomLayouter.js~RandomLayouter",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/layout/RandomLayouter.js",
    "importStyle": "RandomLayouter",
    "description": "Layouts nodes randomly within a bounding rectangle.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 148,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/layout/RandomLayouter.js~RandomLayouter",
    "longname": "src/layout/RandomLayouter.js~RandomLayouter#constructor",
    "access": null,
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "new",
        "defaultRaw": "new",
        "name": "obj.pos",
        "description": "Vec2(0, 0)]\nThe top left corner of the bounding rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1920",
        "defaultRaw": 1920,
        "name": "obj.width",
        "description": "The width of the bounding rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1080",
        "defaultRaw": 1080,
        "name": "obj.height",
        "description": "The height of the bounding rectangle."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "min",
    "memberof": "src/layout/RandomLayouter.js~RandomLayouter",
    "longname": "src/layout/RandomLayouter.js~RandomLayouter#min",
    "access": "private",
    "description": "The top left corner of the bounding rectangle.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "max",
    "memberof": "src/layout/RandomLayouter.js~RandomLayouter",
    "longname": "src/layout/RandomLayouter.js~RandomLayouter#max",
    "access": "private",
    "description": "The botton right corner of the bounding rectangle.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Vec2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "layout",
    "memberof": "src/layout/RandomLayouter.js~RandomLayouter",
    "longname": "src/layout/RandomLayouter.js~RandomLayouter#layout",
    "access": null,
    "description": "Moves the nodes in the given graph to a random position and returns the\nlayout. The range of the x- and y-values can be restricted.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Graph"
        ],
        "spread": false,
        "optional": false,
        "name": "graph",
        "description": "The graph to layout."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "The resulting layout."
    },
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/layout/index.js",
    "memberof": null,
    "longname": "src/layout/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export Layout              from \"./Layout.js\";\nexport EadesLayouter       from \"./EadesLayouter.js\";\nexport FruchtermanLayouter from \"./FruchtermanLayouter.js\";\nexport RandomLayouter      from \"./RandomLayouter.js\";\nimport * as utils          from \"./utils.js\";\n"
  },
  {
    "__docId__": 153,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/layout/utils.js",
    "memberof": null,
    "longname": "src/layout/utils.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Vec2} from \"@ignavia/ella\";\n\n/**\n * Computes the distance between the two points and a normalized direction\n * vector from the first to the second.\n *\n * @param {Vec2} uPos\n * The first position.\n *\n * @param {Vec2} vPos\n * The second position.\n *\n * @param {Vec2|Vec2Builder} [accumulator]\n * A place to store intermediate results in.\n *\n * @return {Object}\n * The distance and direction.\n */\nexport function computeConnection(uPos, vPos, accumulator = new Vec2()) {\n    if (uPos.equals(vPos)) {\n        accumulator.x = randomWiggle();\n        accumulator.y = randomWiggle();\n    } else {\n        accumulator.x = vPos.x - uPos.x;\n        accumulator.y = vPos.y - uPos.y;\n    }\n\n    return {\n        distance:  accumulator.length(),\n        direction: accumulator.normalize(),\n    };\n}\n\n/**\n * Adds some random wiggle to the node positions if they are equal.\n *\n * @return {number}\n * A random number between -1 and 1, excluding 0.\n */\nfunction randomWiggle() {\n    let result;\n\n    do {\n        result = Math.random() - Math.random();\n    } while (result === 0);\n\n    return result;\n}"
  },
  {
    "__docId__": 154,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "computeConnection",
    "memberof": "src/layout/utils.js",
    "longname": "src/layout/utils.js~computeConnection",
    "access": null,
    "export": true,
    "importPath": "@ignavia/earl/src/layout/utils.js",
    "importStyle": "{computeConnection}",
    "description": "Computes the distance between the two points and a normalized direction\nvector from the first to the second.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "uPos",
        "description": "The first position."
      },
      {
        "nullable": null,
        "types": [
          "Vec2"
        ],
        "spread": false,
        "optional": false,
        "name": "vPos",
        "description": "The second position."
      },
      {
        "nullable": null,
        "types": [
          "Vec2",
          "Vec2Builder"
        ],
        "spread": false,
        "optional": true,
        "name": "accumulator",
        "description": "A place to store intermediate results in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The distance and direction."
    },
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "randomWiggle",
    "memberof": "src/layout/utils.js",
    "longname": "src/layout/utils.js~randomWiggle",
    "access": null,
    "export": false,
    "importPath": "@ignavia/earl/src/layout/utils.js",
    "importStyle": null,
    "description": "Adds some random wiggle to the node positions if they are equal.",
    "lineNumber": 40,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random number between -1 and 1, excluding 0."
    },
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 175,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 180,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 181,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 188,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 190,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 191,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 192,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 200,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 201,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 209,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 210,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 211,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]